" vim: ft=vim:

call plug#begin('~/.vim/plugged')

" Colors
let g:gruvbox_bold = 1
let g:gruvbox_italic = 1
let g:gruvbox_contrast_dark = 'medium'
Plug 'gruvbox-community/gruvbox'
let g:gruvbox_material_enable_bold = 1
let g:gruvbox_material_enable_italic = 1
let g:gruvbox_material_transparent_background = 1
let g:gruvbox_material_background = 'medium'
let g:gruvbox_material_palette = 'mix'
Plug 'sainnhe/gruvbox-material'
let g:lightline = {'colorscheme' : 'gruvbox_material'}

" junegunn/fzf {{{ "
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } | Plug 'junegunn/fzf.vim'
let g:fzf_buffers_jump = 1
nmap <a-g> :Rg<CR>
nmap <a-l> :Lines<CR>
" Mapping selecting mappings
nmap <c-l>m <plug>(fzf-maps-n)
xmap <c-l>m <plug>(fzf-maps-x)
imap <c-l>m <plug>(fzf-maps-i)
omap <c-l>m <plug>(fzf-maps-o)
" Insert mode completion
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)
" Lookup dictionary with translate
inoremap <expr> <c-x><c-d> fzf#complete({
            \ 'source': 'cat ~/.vim/spell/en.utf-8.add /usr/share/dict/words 2>/dev/null',
            \ 'options': '--preview="ydcv --color=always {}" --preview-window=down',
            \ 'left': 50})
autocmd Filetype gitcommit inoremap <expr> <c-x><c-x> fzf#complete({
            \ 'source': 'git log --pretty=format:"%s"',
            \ 'options': '--preview="ydcv --color=always {}" --preview-window=down',
            \ 'left': 50})
" Override default command
command! -bang Colors call fzf#vim#colors({'left': '15%', 'options': '--reverse'}, <bang>0)
" FZF with devicons
function! s:file_action(item, action)
    if expand('$FZF_PATH_LOC') == ''
        lt l:file = a:item
    else
        let l:file = a:item[stridx(a:item, ' ', 1)+1 : -1]
    endif
    execute a:action l:file
endfunction

function! s:file_edit(items)
    for file in a:items
        call s:file_action(file, 'edit')
    endfor
endfunction
function! s:file_tab(items)
    for file in a:items
        call s:file_action(file, 'tabnew')
    endfor
endfunction
function! s:file_split(items)
    for file in a:items
        call s:file_action(file, 'split')
    endfor
endfunction
function! s:file_vsplit(items)
    for file in a:items
        call s:file_action(file, 'vsplit')
    endfor
endfunction

let g:fzf_action = {
            \ 'alt-v':  'vsplit',
            \ 'alt-t':  'nabnew',
            \ 'alt-x':  'split',
            \ 'ctrl-m': function('s:file_edit'),
            \ 'ctrl-t': function('s:file_tab'),
            \ 'ctrl-x': function('s:file_split'),
            \ 'ctrl-v': function('s:file_vsplit') }

function! s:fzf_devicons()
    let l:fzf_files_options = '
                \ --no-border
                \ --multi
                \ --preview-window right
                \ --preview "$FZF_FILE_HIGHLIGHTER {$FZF_PATH_LOC} 2>/dev/null | head -'.&lines.'"
                \ '

    call fzf#run(fzf#wrap('fzf_devicons', {
                \ 'source':  expand('$FZF_CTRL_T_COMMAND'),
                \ 'window':  'call FloatingFZF()',
                \ 'options': l:fzf_files_options,
                \ 'down':    '50%',
                \ }))
endfunction
command! FilesWithIcon :call s:fzf_devicons()
nmap <a-f> :FilesWithIcon<CR>
nmap <a-b> :Buffers<CR>

if has('nvim')
  function! s:create_float(hl, opts)
    let buf = nvim_create_buf(v:false, v:true)
    let opts = extend({'relative': 'editor', 'style': 'minimal'}, a:opts)
    let win = nvim_open_win(buf, v:true, opts)
    call setwinvar(win, '&winhighlight', 'NormalFloat:'.a:hl)
    call setwinvar(win, '&colorcolumn', '')
    return buf
  endfunction

  function! FloatingFZF()
    " Size and position
    let width = float2nr(&columns * 0.9)
    let height = float2nr(&lines * 0.6)
    let row = float2nr((&lines - height) / 2)
    let col = float2nr((&columns - width) / 2)

    " Border
    " let top = '┌' . repeat('─', width - 2) . '┐'
    " let mid = '│' . repeat(' ', width - 2) . '│'
    " let bot = '└' . repeat('─', width - 2) . '┘'
    " let top = '┏' . repeat('━', width - 2) . '┓'
    " let mid = '┃' . repeat(' ', width - 2) . '┃'
    " let bot = '┗' . repeat('━', width - 2) . '┛'
    let top = '┏━' . repeat('─', width - 4) . '━┓'
    let mid = '│'  . repeat(' ', width - 2) .  '│'
    let bot = '┗━' . repeat('─', width - 4) . '━┛'
    let border = [top] + repeat([mid], height - 2) + [bot]

    " Draw frame
    let s:frame = s:create_float('Comment', {'row': row, 'col': col, 'width': width, 'height': height})
    call nvim_buf_set_lines(s:frame, 0, -1, v:true, border)

    " Draw viewport
    call s:create_float('Normal', {'row': row + 1, 'col': col + 2, 'width': width - 4, 'height': height - 2})
    autocmd BufWipeout <buffer> execute 'bwipeout' s:frame
  endfunction

  let g:fzf_layout = { 'window': 'call FloatingFZF()' }
endif
" }}} junegunn/fzf "

call plug#end()

" Custom functions {{{ "
" Open repo in browser
function! s:go_github()
    let s:repo = matchstr(expand("<cWORD>"), '\v[0-9A-Za-z\-\.\_]+/[0-9A-Za-z\-\.\_]+')
    if empty(s:repo)
        echo "GoGithub: No repository found."
    else
        let s:url = 'https://github.com/' . s:repo
        call netrw#BrowseX(s:url, 0)
    end
endfunction
autocmd FileType *vim,*zsh,*bash,*tmux nnoremap <buffer> <silent> <cr> :call <sid>go_github()<cr>
" }}} Custom functions "

" vim-plug extension {{{ "
" Define some custom command
command! PU PlugUpgrade | PlugUpdate
command! PI PlugInstall
command! PC PlugClean

" rotate-colors {{{ "
function! s:colors(...)
    return filter(map(filter(split(globpath(&rtp, 'colors/*.vim'), "\n"),
                \                  'v:val !~ "^/usr/"'),
                \           'fnamemodify(v:val, ":t:r")'),
                \       '!a:0 || stridx(v:val, a:1) >= 0')
endfunction
function! s:rotate_colors()
    if !exists('s:colors')
        let s:colors = s:colors()
    endif
    let name = remove(s:colors, 0)
    call add(s:colors, name)
    execute 'colorscheme' name
    redraw
    echo name
endfunction
nnoremap <silent> <F8> :call <SID>rotate_colors()<cr>
" }}} rotate-colors "

" Zoom {{{ "
function! s:zoom()
  if winnr('$') > 1
    tab split
  elseif len(filter(map(range(tabpagenr('$')), 'tabpagebuflist(v:val + 1)'),
                  \ 'index(v:val, '.bufnr('').') >= 0')) > 1
    tabclose
  endif
endfunction
nnoremap <silent> <c-w><c-w> :call <sid>zoom()<cr>
" }}} Zoom "

" Execute current buffer {{{ "
function! s:execute_buffer()
    if !empty(expand('%'))
        write
        call system('chmod +x '.expand('%'))
        silent e
        vsplit | terminal ./%
    else
        echohl WarningMsg
        echo 'Save the file first'
        echohl None
    endif
endfunction
command! RUN :call s:execute_buffer()
autocmd FileType sh,bash,zsh,python,ruby nnoremap <leader>rr :RUN<cr>
" }}} Execute script "


" }}}  "