" vim: set foldmethod=marker foldlevel=0 nomodeline:
" ============================================================================

source ~/.vim_map
source ~/.vim_plug

augroup vimrc
  autocmd!
augroup END

let mapleader      = '<SPACE>'
nnoremap <SPACE> <Nop>
let maplocalleader = '<SPACE>'
silent! source ~/.vim_local

if has("termguicolors")
set termguicolors
endif

if !has('gui_running')
  set t_Co=256
endif

" Enable mouse
silent! set ttymouse=xterm2
set mouse=a

" Keep the cursor on the same column
set nostartofline

" Linebrake on 90 characters
set linebreak
"set textwidth=100
set wrap

" Make '<', '>', 'h', 'l' work properly.
set whichwrap+=<,>,h,l

" Set how many lines of history Vim will remember
set history=1000

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Show row number
set number

" Set height of cmd line
set cmdheight=2

" Highlight search matches
set hlsearch

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second (i.e. x/10 s) to blink when matching brackets
set matchtime=2

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
set wildmode=full

" Set auto indent and C/C++ indent
set smartindent
set cindent

" Use Unix as the standard file type
set fileformat=unix
set fileformats=unix,dos,mac

" Set the sequence of auto encoding
set fileencodings=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936,big5
set encoding=utf-8

" Share clipboard with OS
set clipboard+=unnamed

" Set n lines to the cursor - when moving vertically using j/k
set scrolloff=5
set sidescrolloff=15

" Use spaces instead of tabs
set expandtab
" Set tab width to 4 spaces
set tabstop=4
set shiftwidth=4

" Highlight current line
set nocursorline

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase
" Set fold method
set foldmethod=syntax
set foldlevel=0

" Show whitespace
set list listchars=tab:»·,trail:·

set wildmenu
set wildmode=longest:list,full


" No swap files, use version control instead
set noswapfile

" Enable record undo history
set undofile
set undodir=/tmp/vim-$USER/undodir/

set noerrorbells
set visualbell

set autochdir

set autoread

set diffopt=vertical

" Mark conceal level
set conceallevel=2

"¦ ┆ │ ⎸ ▏
set fillchars+=vert:¦

" Default 800ms is too slow
set updatetime=100

" Default 1000ms is too long
set timeoutlen=400

set noshowmode

set showcmd

" always show signcolumns
" v:version also return 800 for nvim
if v:version >= 800
  set signcolumn=yes
endif

" Settings suggested by coc.nvim
set hidden " if hidden is not set, TextEdit might fail.
set nobackup " Some servers have issues with backup files, see #649
set nowritebackup
set shortmess+=c " don't give 'ins-completion-menu' messages.

" autocmd InsertLeave,WinEnter * set cursorline
" autocmd InsertEnter,WinLeave * set nocursorline

" Set spell in certain cases
autocmd FileType text,markdown,gitcommit setl spell


" Set spell in certain cases
autocmd FileType text,markdown,gitcommit setl spell

" Have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" Show changes since last save
function! s:DiffSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setl bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
command! DS call s:DiffSaved()

" Split and open terminal
command! -nargs=* T  split  | terminal <args>
command! -nargs=* VT vsplit | terminal <args>

" Automatic rename of tmux window
if exists('$TMUX') && !exists('$NORENAME')
    au BufEnter * if empty(&buftype) | call system('tmux rename-window '.expand('%:t:S')) | endif
    au VimLeave * call system('tmux set-window automatic-rename on')
endif

" Hide number & sign columns to do tmux copy
function! s:tmux_copy_mode_toggle()
    setlocal nu!
    if &signcolumn == 'no'
        setlocal signcolumn=auto
    else
        setlocal signcolumn=no
    endif
endfunction
command! TmuxCopyModeToggle call s:tmux_copy_mode_toggle()

function! DetectNoneExtensionFileType()
    " Nothing to do when filetype is already set
    if &ft != '' | return | endif

    if getline(1) =~ '-\*- C++ -\*-'
        " Highlight c++ standard lib file without extension
        setf cpp
    else
        " Set filetype to 'unknown' when no filetype detected. Mainly for ycm
        " https://github.com/Valloric/YouCompleteMe/commit/81444e207c3bdf398490f13f57ea360371d56be1
        setf unknown | setl commentstring=//%s
    endif
endfunction

" Add custom filetypes detection. Mainly for ultisnipAcs
au BufRead,BufNewFile pom.xml           setl ft=maven.xml
au BufRead,BufNewFile build.gradle      setl ft=gradle.groovy
au BufRead,BufNewFile *.esquery.json    setl ft=esquery.json
au BufRead,BufNewFile *pre-commit       setl ft=sh
au BufNewFile,BufRead coc-settings.json setl ft=jsonc

au Filetype *vim,*tmux setl foldenable | setl foldmethod=marker
au Filetype *json      setl shiftwidth=2

au BufRead,BufNewFile * call DetectNoneExtensionFileType()



if !has("nvim") && &term =~ '256color'
  set t_ut=
endif

if has('nvim')
  " https://github.com/neovim/neovim/issues/2897#issuecomment-115464516
  let g:terminal_color_0 = '#4e4e4e'
  let g:terminal_color_1 = '#d68787'
  let g:terminal_color_2 = '#5f865f'
  let g:terminal_color_3 = '#d8af5f'
  let g:terminal_color_4 = '#85add4'
  let g:terminal_color_5 = '#d7afaf'
  let g:terminal_color_6 = '#87afaf'
  let g:terminal_color_7 = '#d0d0d0'
  let g:terminal_color_8 = '#626262'
  let g:terminal_color_9 = '#d75f87'
  let g:terminal_color_10 = '#87af87'
  let g:terminal_color_11 = '#ffd787'
  let g:terminal_color_12 = '#add4fb'
  let g:terminal_color_13 = '#ffafaf'
  let g:terminal_color_14 = '#87d7d7'
  let g:terminal_color_15 = '#e4e4e4'

  set fillchars=vert:\|,fold:-
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
endif

" seoul256 (dark):
"   Range:   233 (darkest) ~ 239 (lightest)
"   Default: 237
let g:seoul256_background = 235
colo seoul256
silent! colo seoul256


"silent! colorscheme gruvbox-material
" silent! colorscheme gruvbox
"
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap<tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
"nmap <silent> <C-s> <Plug>(coc-range-select)
"xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR> 
