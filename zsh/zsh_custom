#!/usr/bin/env zsh

(( ${+color} )) || autoload -Uz colors && colors

# Call default program to open something
function xopen() {
    emulate -L zsh
    setopt shwordsplit
    local open
    case "$OSTYPE" in
        (linux*) open='xdg-open'                              ;;
        (darwin*) open='open'                                 ;;
        (cygwin*) open='cygstart'                             ;;
        (msys*) open='start ""'                               ;;
        (*) echo "Platform $OSTYPE not supported" && return 1 ;;
    esac
    # Open as url when directly open failed.
    # Useful when openning urls without 'http://' prefix
    if [[ "$OSTYPE" == darwin* ]]; then
        "$open" "$@" &>/dev/null || "$open" "http://$@" &>/dev/null
    else
        nohup "$open" "$@" &>/dev/null || nohup "$open" "http://$@" &>/dev/null
    fi
} && alias o='xopen'

# remove broken symbolics
function wfxr::rm-broken-links() {
    local ls links
    [[ $+commands[exa] ]] && ls=exa || ls=ls
    IFS=$'\n' links=(`eval "find $1 -xtype l"`)
    [[ -z $links ]] && return
    $ls -l --color=always ${links[@]}
    echo -n "Remove? [y/N]: "
    read -q && rm -- ${links[@]}
}
function rm-broken-links-all() { wfxr::rm-broken-links               }
function rm-broken-links()     { wfxr::rm-broken-links '-maxdepth 1' }


# Tmux switch session
function wfxr::tmux-switch() {
    [[ ! $TMUX ]] && return 1 # Not in tmux session
    local preview curr choice &&
        preview='<<< {} awk "{print \$2}" | xargs tmux list-windows -t | sed "s/\[.*\]//g" | column -t | sed "s/  \(\S\)/ \1/g"' &&
        curr=$(tmux display-message -p "#S") &&
        choice=$(tmux ls -F "#{session_name}" | grep -v $curr | nl -w2 -s' ' \
            | fzf-tmux +s -e -1 -0 --height=14 --header="  * $curr" \
                              --bind 'alt-t:down' --cycle \
                              --preview="$preview" \
                              --preview-window=right:60%) &&
        tmux switch-client -t $(awk '{print $2}' <<<"$choice") 2>/dev/null
}
# Tmux attach session
function wfxr::tmux-attach() {
    [[ $TMUX ]] && return 1 # Already in tmux session
    local preview choice &&
        preview='<<< {} awk "{print \$2}" | xargs tmux list-windows -t | sed "s/\[.*\]//g" | column -t | sed "s/  \(\S\)/ \1/g"' &&
        choice=$(tmux ls -F "#{session_name}" | nl -w2 -s' ' \
            | fzf +s -e -1 -0 --height=14 \
                              --bind 'alt-t:down' --cycle \
                              --preview="$preview" \
                              --preview-window=right:60%) &&
        tmux attach-session -t $(awk '{print $2}' <<<"$choice") 2>/dev/null
}
# Tmux select window
function wfxr::tmux-select-window() {
    [[ ! $TMUX ]] && return 1
    local curr choice &&
        curr=$(tmux display-message -p "#W") &&
        choice=$(tmux list-windows -F "#I #W #F" | grep -v '*' | awk '{printf "%2d %s\n", $1, $2}' \
        | fzf-tmux +s -e -1 -0 --height=10 --header=" * $curr"\
                          --bind 'alt-w:down' --cycle) &&
        tmux select-window -t $(awk '{print $2}' <<<"$choice") 2>/dev/null
        zle redisplay 2>/dev/null || true
}
# Tmux attach or create target session
function t() {
    if [[ $# -eq 0 ]]; then
        if [[ $TMUX ]]; then
            wfxr::tmux-switch
        else
            if tmux list-sessions &>/dev/null; then
                wfxr::tmux-attach
            else
                tmux new-session -A -s "default"
            fi
        fi
    else
        if [[ $TMUX ]]; then
            if ! tmux has-session -t "$1" 2>/dev/null; then
                tmux new-session -d -s "$1"
            fi
            tmux switch-client -t "$1"
        else
            tmux new-session -A -s "$1"
        fi
    fi
    zle redisplay 2>/dev/null || true
}
# https://issue.life/questions/37597191
bindkey -s '^[t' 't\n'
if [[ $TMUX ]]; then
    zle -N t
    bindkey '^[t' t
    zle -N wfxr::tmux-select-window
    bindkey '^[w' wfxr::tmux-select-window
fi

# Application launcher
function fzf-dmenu() {
    # note: xdg-open has a bug with .desktop files, so we cant use that shit
    local selected="$(ls /usr/share/applications | sed 's/\(.*\)\.desktop/\1/g' | fzf -e).desktop"
    [ $? -eq 0 ] && nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
}
# hotkey to run the function (Ctrl+v)
#bindkey -s '^V' "fzf-dmenu\n"

# Powerful fg
function fzf-fg() {
    local jobId=$(jobs -l | fzf --exact --exit-0 --select-1 --height=6 | sed "s/^\[\(.*\)\].*$/\1/g")
    # continue only when a jobId selected
    [ $jobId ] && fg %$jobId
}
bindkey -s '^[z' "fzf-fg\n"

autoload -U edit-command-line
zle -N edit-command-line
bindkey '^[v' edit-command-line

# edit
function e() {
    local files
    IFS=$'\n' files=($(fzf -q "`echo $@`" -m -1 -0))
    [[ $? -eq 0 ]] && ${EDITOR:-vim} "${files[@]}"
}

function wfxr::yank() {
    <<< "$LBUFFER" | pbcopy
    BUFFER="$LBUFFER"
    CURSOR="$#BUFFER"
    zle redisplay
}
zle     -N   wfxr::yank
bindkey '^Y' wfxr::yank

function wfxr::paste() {
    LBUFFER="${LBUFFER}$(pbpaste)"
    zle redisplay
}
zle     -N   wfxr::paste
bindkey '^V' wfxr::paste

# function ipcn() { curl https://ip.cn/$1 }
function ipcn() { curl -fsSL -Ax 'https://ip.cn?ip=$1' | grep -oP '<code>\K(.*?)(?=</code>)' }
function ipshow() { ip addr show | grep 'inet\s\+' | grep -v "127.0.0.1" | awk '{print $2,$9}' | column -t }

# ssh
function fssh() {
    [[ $+commands[mosh] ]] && ssh=ssh || ssh=mosh
    [[ -f ~/.ssh/host_info ]] && host=$(column -t ~/.ssh/host_info | fzf --header-lines=1 | cut -d' ' -f1)
    [[ -n $host ]] && $ssh $host
}
# bindkey -s '^s' 'fssh\n'
function fsshcp() {
    local curr=`showip | tail -1 | cut -d'/' -f1`
    [[ -n $curr  ]] && local hosts=`grep -v '^\s*#' ~/.ssh/host_info | grep -v $curr | fzf -m | awk '{print $1}'`
    [[ -n $hosts ]] && IFS=$'\n' local files=(`fzf -m`)
    [[ -n $files ]] && echo $hosts | xargs -i{} scp ${files[@]} {}:
}
function fsshcmd() {
    local curr=`showip | tail -1 | cut -d'/' -f1`
    [[ -n $curr  ]] && local hosts=`grep -v '^\s*#' ~/.ssh/host_info | grep -v $curr | fzf -m | awk '{print $1}'`
    host_count=`wc -l <<< $hosts`
    [[ $host_count -gt 0 ]] && local cmd=(`echo -n |fzf --print-query`)
    [[ -n $cmd   ]] && echo $hosts | xargs -P $host_count -n1 -i{} bash -c "ssh {} $cmd > {}.log"
}
function fssh-copy-id() {
    local curr=`showip | tail -1 | cut -d'/' -f1`
    [[ -n $curr  ]] && local hosts=`grep -v '^\s*#' ~/.ssh/host_info | grep -v $curr | fzf -m | awk '{print $1}'`
    [[ -n $hosts ]] && local pub=`ls -d ~/.ssh/* | grep '\/id_.*pub$' | fzf`
    [[ -n $pub   ]] && echo $hosts | xargs -i{} ssh-copy-id -i $pub {}
}
function colortest()  { curl -s 'https://raw.githubusercontent.com/stark/Color-Scripts/master/color-scripts/colortest' | bash }
function colortest2() { curl -s 'https://raw.githubusercontent.com/JohnMorales/dotfiles/master/colors/24-bit-color.sh' | bash }
function __unicode_translate() {
    local CODE=$BUFFER[-4,-1]
    [[ ! ${(U)CODE} =~ [0-9A-F]{4} ]] && return
    CHAR=`echo -e "\\u$CODE"`
    BUFFER=$BUFFER[1,-5]$CHAR
    CURSOR=$#BUFFER
    zle redisplay
}
zle -N __unicode_translate
bindkey '^[u' __unicode_translate
function unicode-map() {
    ruby -e '0x100.upto(0xFFFF) do |i| puts "%04X%8d%6s" % [i, i, i.chr("UTF-8")] rescue true end' | fzf -m
}
function backup-t()  { rename -n 's/^(.*)$/$1.bak/g' $@ }
function backup()    { rename    's/^(.*)$/$1.bak/g' $@ }
function restore-t() { rename -n 's/^(.*).bak$/$1/g' $@ }
function restore()   { rename    's/^(.*).bak$/$1/g' $@ }

# ghq
function gcd() {
    (( $+commands[exa] )) && ll='exa -lbhg --git --time-style long-iso --color=always' || ll='ls -l --time-style long-iso --color=always'
    root=$(ghq root)
    repo=$(ghq list| fzf --preview="$ll $root/{}" --preview-window=right:60%)
    [[ -n "$repo" ]] && cd "$(ghq root)/$repo"
}
function mcd() { mkdir -p -v "$1" && cd "$1" && pwd }
function uppercase() { printf '%s\n' "${1^^}" }
function lowercase() { printf '%s\n' "${1,,}" }

function grepo() {
    [[ "$#" -ne 0 ]] && return $(xopen "https://github.com/${(j:/:)@}")
    local url
    url=$(git remote get-url origin) || return $?
    [[ "$url" =~ '^git@' ]] && url=$(echo "$url" | sed -e 's#:#/#' -e 's#git@#https://#')
    xopen "$url"
}
function gclone() { git clone "https://github.com/${(j:/:)@}" }
function gsearch() {
    local header list repos
    header='["Repostory", "Stars", "Description"]'
    list="$(curl -fsSL "https://api.github.com/search/repositories?q=$1" |
        command jq -r "$header, (.items[] | [.full_name, .stargazers_count, .description]) | @tsv" |
        column -t -s $'\t')"
    repos=("${(@f)$(echo "$list" | fzf -m -0 -1 --header-lines=1 | awk '{print $1}')}")
    for repo in $repos; do
        xopen "https://github.com/$repo"
    done
}

# Dump zsh hash map
function dump_map() {
    local cmd="
        for k in \"\${(@k)$1}\"; do
            echo $2 \"\$k => \$$1[\$k]\"
        done
    "
    eval "$cmd"
}

function zsh-bench() { for i ({1..${1:-5}}) time zsh -ilc echo &>/dev/null || true }

# integrate z with fzf
function j() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _last_z_args="$@"
    _z "$@"
  fi
}
function jj() {
  cd "$(_z -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf -q "$_last_z_args")"
}
function vim-plugins-profile() {
    ruby <(curl -sSL https://raw.githubusercontent.com/hyiltiz/vim-plugins-profile/master/vim-plugins-profile.rb)
}
function get-window-class() { xprop | grep -i class }
function gtype() {
    local content=$(cat <<-EOF
💍 test     - Adding missing tests
🎸 feat     - A new feature
🐛 fix      - A bug fix
🤖 chore    - Build process or auxiliary tool changes
📝 docs     - Documentation only changes
💡 refactor - A code change that neither fixes a bug or adds a feature
💄 style    - Markup, white-space, formatting, missing semi-colons...
🎡 ci       - CI related changes
⚡ perf     - A code change that improves performance
EOF
)
    local height=$(( $(echo $"$content" | wc -l) + 4 ))
    echo "$content" | fzf --height=$height | awk '{ print $2 }'
}

syncgit() {
    trap 'command rm -rf $TEMP' EXIT INT TERM HUP
    TEMP="$(mktemp -td --suffix=.tmp "$(basename "$0")".XXXXXX)"
    git clone "$(git remote get-url origin)" "$TEMP/repo" &&
        rm -rf .git && mv "$TEMP/repo/.git" .
}

