{:profiles
 {:goku {:default true
         :alone   80 ; hold for .. ms to register single tap
         :held    50 ; TODO: not sure what it's for
         :delay   0 ; time after which the key press is delayed
         :sim     30}} ; keys need to be pressed within this threshold to be considered simultaneous
 :tos       {:same_wind_app   {:key :grave_accent_and_tilde :modi [:left_command] :lazy true}
             :prev_app        {:key :tab :modi [:left_command] :lazy true}
             :left_paren      {:key :9 :modi [:left_shift] :lazy true}
             :right_paren     {:key :0 :modi [:left_shift] :lazy true}
             :home_dir        [{:key :grave_accent_and_tilde :modi [:left_shift] :lazy true}
                               {:key :slash}]
             :regex_match_any [{:key :period}
                               {:key :8 :modi [:left_shift] :lazy true}]
             :select_us       {:select_input_source
                               {:input_mode_id   ""
                                :input_source_id "com.apple.keylayout.US"
                                :language        "en"}}
             :select_abc {:input :abc}}
 :modifiers {:ro :right_option} 
 :templates {:alfred "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
             :km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
             :open "open \"%s\""
             :launch     "osascript -e 'tell application \"Alfred 4\" to run trigger \"launch%s\" in workflow \"yqrashawn.workflow.launcher\" with argument \"\"'"
             :alf        "open /Applications/Alfred\\ 4.app && osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\"'"
             :kb-maestro "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
             :opena      "open -a \"%s\""
             :show       "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'\n"
             :toggle     "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else if frontmost of process appName then\n    set visible of process appName to false\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'"
             :type       "osascript -e 'tell application \"System Events\" to keystroke \"%s\" as text'"
             ;; :focus      "/usr/local/bin/yabai -m display --focus \"%s\" & /usr/local/bin/yabai -m space --focus \"%s\""
             }
 :devices            {:macbook-internal [{:product_id 631 :vendor_id 1452}]
                      :uhk-keyboard     [{:product_id 24866 :vendor_id 7504}]
                      :filco-minila     [{:product_id 34050 :vendor_id 2652}]
                      :hhkb-tmk         [{:vendor_id 65261 :product_id 51966}]
                      :hhkb-bt          [{:vendor_id 1278 :product_id 514}]
                      :hhkb             [{:vendor_id 2131 :product_id 256}]
                      :kensington-tb    [{:vendor_id 1149 :product_id 32792}]}
 :applications       {:emacs-mode-disable-app        ["^org\\.gnu\\.Emacs$",
                                                      "^org\\.gnu\\.AquamacsEmacs$",
                                                      "^org\\.gnu\\.Aquamacs$",
                                                      "^org\\.pqrs\\.unknownapp.conkeror$",
                                                      "^com\\.microsoft\\.rdc$",
                                                      "^com\\.microsoft\\.rdc\\.mac$",
                                                      "^com\\.microsoft\\.rdc\\.macos$",
                                                      "^com\\.microsoft\\.rdc\\.osx\\.beta$",
                                                      "^net\\.sf\\.cord$",
                                                      "^com\\.thinomenon\\.RemoteDesktopConnection$",
                                                      "^com\\.itap-mobile\\.qmote$",
                                                      "^com\\.nulana\\.remotixmac$",
                                                      "^com\\.p5sys\\.jump\\.mac\\.viewer$",
                                                      "^com\\.p5sys\\.jump\\.mac\\.viewer\\.web$",
                                                      "^com\\.teamviewer\\.TeamViewer$",
                                                      "^com\\.vmware\\.horizon$",
                                                      "^com\\.2X\\.Client\\.Mac$",
                                                      "^com\\.apple\\.Terminal$",
                                                      "^com\\.googlecode\\.iterm2$",
                                                      "^co\\.zeit\\.hyperterm$",
                                                      "^co\\.zeit\\.hyper$",
                                                      "^io\\.alacritty$",
                                                      "^com\\.github\\.wez\\.wezterm$"
                                                      "^net\\.kovidgoyal\\.kitty$",
                                                      "^org\\.vim\\.",
                                                      "^com\\.qvacua\\.VimR$",
                                                      "^com\\.vmware\\.fusion$",
                                                      "^com\\.vmware\\.horizon$",
                                                      "^com\\.vmware\\.view$",
                                                      "^com\\.parallels\\.desktop$",
                                                      "^com\\.parallels\\.vm$",
                                                      "^com\\.parallels\\.desktop\\.console$",
                                                      "^org\\.virtualbox\\.app\\.VirtualBoxVM$",
                                                      "^com\\.vmware\\.proxyApp\\.",
                                                      "^com\\.parallels\\.winapp\\.",
                                                      "^org\\.x\\.X11$",
                                                      "^com\\.apple\\.x11$",
                                                      "^org\\.macosforge\\.xquartz\\.X11$",
                                                      "^org\\.macports\\.X11$",
                                                      "^com\\.sublimetext\\.",
                                                      "^com\\.microsoft\\.VSCode(Insiders)?$"]
                      :VSCode                        ["^com\\.microsoft\\.VSCode(Insiders)?$"]
                      :Emacs                         ["^org\\.gnu\\.Emacs$"
                                                      "^org\\.gnu\\.AquamacsEmacs$"
                                                      "^org\\.gnu\\.Aquamacs$"]
                      :Chromes                       ["^org\\.chromium\\.Chromium$"
                                                      "^com\\.google\\.Chrome$"
                                                      "^com\\.google\\.Chrome\\.dev$"
                                                      "^com\\.google\\.Chrome\\.canary$"
                                                      "^com\\.microsoft\\.edgemac\\.Beta$"]
                      :Chrome                        ["^com\\.google\\.Chrome$"]
                      :ChromeCanary                  ["^com\\.google\\.Chrome\\.canary$"]
                      :Chromium                      ["^org\\.chromium\\.Chromium$"]
                      :Firefoxes                     ["^org\\.mozilla\\.firefox$"
                                                      "^org\\.mozilla\\.firefoxdeveloperedition$"]
                      :Terminals                     ["^com\\.apple\\.Terminal$"
                                                      "^com\\.googlecode\\.iterm2$"
                                                      "^co\\.zeit\\.hyperterm$"
                                                      "^co\\.zeit\\.hyper$"
                                                      "^io\\.alacritty$"
                                                      "^com\\.github\\.wez\\.wezterm$"
                                                      "^net\\.kovidgoyal\\.kitty$"]
                      :vim-mode-disabled-application ["^com\\.apple\\.Terminal$"
                                                      "^com\\.googlecode\\.iterm2$"
                                                      "^co\\.zeit\\.hyperterm$"
                                                      "^co\\.zeit\\.hyper$"
                                                      "^io\\.alacritty$"
                                                      "^com\\.github\\.wez\\.wezterm$"
                                                      "^net\\.kovidgoyal\\.kitty$"
                                                      "^org\\.vim\\."
                                                      "^com\\.qvacua\\.VimR$"]
                      :Finder                        ["^com\\.apple\\.finder$"]
                      :Debuggers                     ["^org\\.mozilla\\.firefox$"
                                                      "^com\\.microsoft\\.edgemac\\.Beta$"
                                                      "^org\\.mozilla\\.firefoxdeveloperedition$"
                                                      "^com\\.google\\.Chrome$"
                                                      "^org\\.chromium\\.Chromium$"
                                                      "^com\\.google\\.Chrome\\.canary$"
                                                      "^com\\.apple\\.Safari$"
                                                      "^com\\.microsoft\\.VSCode(Insiders)?$"]
                      :Alfred                        ["^com\\.runningwithcrayons\\.Alfred$"]
                      :Todoist                       ["^com\\.todoist\\.mac\\.Todoist$"]
                      :Keybase                       ["^keybase\\.Electron$"]
                      :Browsers                      ["^org\\.mozilla\\.firefox$"
                                                      "^org\\.mozilla\\.firefoxdeveloperedition$"
                                                      "^com\\.google\\.Chrome$"
                                                      "^org\\.chromium\\.Chromium$"
                                                      "^com\\.google\\.Chrome\\.canary$"
                                                      "^com\\.apple\\.Safari$"
                                                      "^com\\.microsoft\\.edgemac\\.Beta$"]
                      :wechat                        ["^com\\.tencent\\.xinWeChat$"]
                      :REBL                          ["^net\\.java\\.openjdk\\.cmd$"]
                      :2Do                           ["^com\\.guidedways\\.TodoMac$"]}
 :input-sources      {:squirrel {:input_mode_id   "^com\\.googlecode\\.rimeime\\.inputmethod\\.Squirrel$"
                                 :input_source_id "^com\\.googlecode\\.rimeime\\.inputmethod\\.Squirrel\\.Rime$"}
                      :us       {:input_mode_id   ""
                                 :input_source_id "com.apple.keylayout.US"
                                 :language        "en"}
                      :abc      {:input_source_id "^com\\.apple\\.keylayout\\.ABC$"}
                      :cn       {:input_source_id "^com\\.apple\\.inputmethod\\.SCIM\\.ITABC$"}}
 :simlayer-threshold 210
 :layers    {:tab-mode              {:key     :tab
                                     :afterup [{:set ["yabai-move-mode" 0]}
                                               {:set ["yabai-scale-mode" 0]}
                                               {:set ["spec-mode" 0]}]
                                     :condi   [:!comma-mode :!period-mode]}
             :yabai-move-mode       {:key :f :condi :tab-mode}
             :yabai-scale-mode      {:key :c :condi :tab-mode}
             :spec-mode             {:key :s :condi :tab-mode}
             ;; :yabai-insert-mode     {:key :i :condi :tab-mode}
             :emacs-windmove-mode   {:key :q :condi [:Emacs :!comma-mode :!period-mode]}
             :emacs-windresize-mode {:key :c :condi :emacs-windmove-mode}
             :emacs-bufmove-mode    {:key :f :condi :emacs-windmove-mode}
             :period-mode           {:key :period :afterup {:set ["period-comma-mode" 0]} :condi [:!emacs-s-mode :!tmux-windmove-mode :!k2-mode]}
             :comma-mode            {:key :comma :condi [:!emacs-s-mode :!tmux-windmove-mode]}
             :tmux-windmove-mode    {:key :q :condi [:Terminals :!comma-mode :!period-mode]}
             :tmux-windresize-mode  {:key :c :condi :tmux-windmove-mode}
             :k2-mode               {:key :2 :condi [:!tab-mode :!tmux-windmove-mode]}}
 :simlayers {
             :test-mode             {:key :9}
             :contexts-f-mode       {:key :f}
             :emacs-m-mode          {:key :m :condi :Emacs}
             :emacs-v-mode          {:key :v :condi :Emacs}
             :emacs-special-s-mode  {:key :s :condi :Emacs :afterup {:key :return_or_enter}}
             :emacs-s-mode          {:key :s :condi :Emacs}
             :vscode-s-mode         {:key :s :condi :VSCode}
             :browser-s-mode        {:key :s :condi :Browsers}
             :emacs-s-mode-terminal {:key :s :condi :Terminals}
             :mouse_keys_mode_v4    {:key :a :afterup {:set ["mouse_keys_mode_v4_scroll" 0]}}
             :vi-mode               {:key :d}
             :vi-visual-mode        {:key :v :condi :!vim-mode-disabled-application}
             :launch-mode           {:key :w}
             ;; :q-mode {:key :q :condi [:!comma-mode :!period-mode]}
             :alfred-mode           {:key :z}
             :finder-alfred-mode    {:key :z :condi :Finder}
             :browsers-alfred-mode  {:key :z :condi :Browsers}         
             :2-mode {:key :2}
             :3-mode {:key :3}
             :4-mode {:key :4}
             :tab-mode {:key :tab}
             :q-mode {:key :q}
             :w-mode {:key :w}
             :e-mode {:key :e}
             :r-mode {:key :r}
             :t-mode {:key :t}
             :i-mode {:key :i}
             :o-mode {:key :o}
             :caps-mode {:key :caps_lock}
             :a-mode {:key :a}
             :s-mode {:key :s}
             :d-mode {:key :d}
             :f-mode {:key :f}
             :g-mode {:key :g}
             :semicolon-mode {:key :semicolon}
             :tilde-mode {:key :grave_accent_and_tilde}
             :z-mode {:key :z}
             :x-mode {:key :x}
             :c-mode {:key :c}
             :v-mode {:key :v}
             :b-mode {:key :b}
             :n-mode {:key :n}
             :m-mode {:key :m}
             :comma-mode {:key :comma}
             :dot-mode {:key :period}
             :spacebar-mode {:key :spacebar}
             :go-mode {:key :period :condi ["in-go" 1]}
             :js-mode {:key :period :condi ["in-js" 1]}
             :swift-mode {:key :period :condi ["in-swift" 1]}
             :rust-mode {:key :period :condi ["in-rust" 1]}
             :py-mode {:key :period :condi ["in-python" 1]}
             :elixir-mode {:key :period :condi ["in-elixir" 1]}
             }
 :main [{:des "test"
              :rules [[[:t :e :s :t] :select_us]]}
             {:des   "Keybase return"
              :rules [;; [[{:pkey :button5} {:pkey :button2}] {:pkey :button1}]
                      :Keybase
                      [:return_or_enter :!Sreturn_or_enter]
                      [:!Creturn_or_enter :return_or_enter]]}
             {:des   "mouse motion to scroll"
              :rules [{:type :mouse_motion_to_scroll :from {:modifiers {:mandatory [:left_command :left_shift]}} :options {:momentum_scroll_enabled true}}]}
             #_{:des   "double press and hold key down in simlayer"
                :rules [[:j "say 'j double press'" [["test-mode-j-dbpress-mode" 1]]]
                        [:j ["say 'j press down'" ["test-mode-j-dbpress-mode" 1]] nil {:delayed {:canceled ["test-mode-j-dbpress-mode" 0]}}
                         :invoked  ["test-mode-j-dbpress-mode" 0]
                         :held    "say 'j held down'"]]}
             #_{:des   "switch input method"
                :rules [{:from        {:key_code :left_shift}
                         :to          [{:key_code :left_shift}]
                         :to_if_alone [{:select_input_source {:input_source_id "^com\\.apple\\.keylayout\\.ABC$"}}]
                         :type        :basic}

                        {:from        {:key_code :right_shift}
                         :to          [{:key_code :right_shift}]
                         :to_if_alone [{:select_input_source {:input_source_id "^com\\.apple\\.inputmethod\\.SCIM\\.ITABC$"}}]
                         :type        :basic}]}
             {:des   "resize window, remap Rectangle"
              :rules [:k2-mode
                      [:return_or_enter :!COc]
                      [:spacebar :!COf]
                      [:y :!CTleft_arrow]        ;; upper left
                      [:n :!CSTleft_arrow]       ;; lower left
                      [:o :!CTright_arrow]       ;; upper right
                      [:period :!CTSright_arrow] ;; lower right
                      [:h :!COleft_arrow]        ;; left half
                      [:l :!COright_arrow]       ;; right half
                      [:k :!COup_arrow]          ;; top half
                      [:j :!COdown_arrow]
                      [:hyphen :!TOShyphen]
                      [:equal_sign :!TOSequal_sign]
                      [:open_bracket :!COTopen_bracket]
                      [:close_bracket :!COTclose_bracket]]}

             {:des   "vscode"
              :rules [:VSCode
                      [:##left_command :left_command nil {:alone [:!CSp ["vsc-m-x-on" 1]]}]
                      :vsc-m-x-on
                      [:!Tl [:return_or_enter ["in-alfred" 0]]]
                      [:!Tj :down_arrow]
                      [:!Tk :up_arrow]
                      [:escape [:escape ["vsc-m-x-on" 0]]]
                      [:##left_control :left_control nil {:alone [:escape ["vsc-m-x-on" 0]]}]
                      [:return_or_enter [:return_or_enter ["vsc-m-x-on" 0]]]
                      :vscode-s-mode
                      [:j :!CSopen_bracket]
                      [:k :!CSclose_bracket]]}

             {:des   "global C-h to backspace"
              :rules [[:!Th :delete_or_backspace nil {:params {:alone 500 :held 500}}]]}
             {:des   "contexts"
              :rules [[[:m :l] [:f16 ["in-contexts" 1]]]
                      [:semicolon :right_option nil {:alone :semicolon}]
                      [:escape [:escape ["in-contexts" 0]] ["in-contexts" 1]]
                      [{:pkey :button1} [{:pkey :button1} ["in-contexts" 0]] ["in-contexts" 1]]
                      [:##left_control :left_control ["in-contexts" 1] {:alone [:escape ["in-contexts" 0]]}]
                      [:##caps_lock [:left_control] ["in-contexts" 1] {:alone [:escape ["in-contexts" 0]]}]
                      [:return_or_enter [:return_or_enter ["in-contexts" 0]] ["in-contexts" 1]]
                      [:!Tm [:return_or_enter ["in-contexts" 0]] ["in-contexts" 1]]
                      :contexts-f-mode
                      [:j [["in-contexts" 1] :f16] ["in-contexts" 0]]
                      [:k [["in-contexts" 1] :f16] ["in-contexts" 0]]
                      [:j :down_arrow ["in-contexts" 1]]
                      [:k :up_arrow ["in-contexts" 1]]
                      [:e [:f :e]]
                      [:l [:return_or_enter ["in-contexts" 0]] ["in-contexts" 1]]]}
             {:des   "in-alfred"
              :rules [:in-alfred
                      [:!Tw :!Odelete_or_backspace]
                      [:!Ty :!Cv]
                      [:!Tslash :!Cz]
                      [:escape [:escape ["in-alfred" 0]]]
                      [:return_or_enter [:return_or_enter ["in-alfred" 0]]]
                      [:##left_control :left_control nil {:alone [:escape ["in-alfred" 0]]}]
                      [:##caps_lock [:left_control] nil {:alone [:escape ["in-alfred" 0]]}]
                      [:!Ctab [:!Ctab ["in-alfred" 0]]]
                      [:!Cright_command [:!Ctab ["in-alfred" 0]]]
                      [:!Tsemicolon [:!Treturn_or_enter ["in-alfred" 0]]]
                      [:!Tl [:return_or_enter ["in-alfred" 0]]]
                      [:!Tj :down_arrow]
                      [:!Tk :up_arrow]
                      [:!Oh :left_arrow]
                      [:!Oj :down_arrow]
                      [:!Ok :up_arrow]
                      [:!Ol :right_arrow]
                      [:!OSh :!OSleft_arrow]
                      [:!OSj :!OSdown_arrow]
                      [:!OSk :!OSup_arrow]
                      [:!OSl :!OSright_arrow]]}
             {:des   "s-mode in emacs"
              :rules [:emacs-s-mode
                      [:j :!!j]
                      [:k :!!k]
                      [:h :!!h]
                      [:l :!!l]
                      [:n [:!Tx :!T9 {:key :n :repeat false}]]
                      [:p [:!Tx :!T9 {:key :p :repeat false}]]
                      [:comma [:!Tx :!T8 :open_bracket]]
                      [:period [:!Tx :!T8 :close_bracket]]
                      [:delete_or_backspace [:!Tx :!T9 :!Sk]]
                      [:open_bracket [:!Tx :!T9 :open_bracket]]
                      [:close_bracket [:!Tx :!T9 :close_bracket]]
                      :emacs-s-mode-terminal
                      [:k [:!Tx :!T9 {:key :k :repeat false}]]
                      [:j [:!Tx :!T9 {:key :j :repeat false}]]
                      [:h [:!Tx :!T9 {:key :h :repeat false}]]
                      [:l [:!Tx :!T9 {:key :l :repeat false}]]
                      [:n [:!Tx :!T9 {:key :n :repeat false}]]
                      [:p [:!Tx :!T9 {:key :p :repeat false}]]]}
             {:des   "Emacs m/v select company candidates"
              :rules [:emacs-m-mode
                      [:a [:!Tx :!T6 :1]]
                      [:s [:!Tx :!T6 :2]]
                      [:d [:!Tx :!T6 :3]]
                      [:f [:!Tx :!T6 :4]]
                      [:g [:!Tx :!T6 :5]]
                      [:h [:!Tx :!T6 :6]]
                      [:left_shift [:!Tx :!T6 :q]]
                      [:z [:!Tx :!T6 :z]]
                      [:x [:!Tx :!T6 :x]]
                      [:c [:!Tx :!T6 :c]]
                      [:left_shift [:!Tx :!T6 :q]]
                      :emacs-v-mode
                      [:right_shift [:!Tx :!T6 :w]]
                      [:g [:!Tx :!T6 :5]]
                      [:h [:!Tx :!T6 :6]]
                      [:j [:!Tx :!T6 :7]]
                      [:k [:!Tx :!T6 :8]]
                      [:l [:!Tx :!T6 :9]]
                      [:semicolon [:!Tx :!T6 :0]]]}
             {:des   "Emacs switch buffer"
              :rules [:Emacs
                      [:tab :!Ttab :period-mode]
                      [:tab :!TStab :comma-mode]]}
             {:des   "s-mode in chrome"
              :rules [:browser-s-mode
                      [:j :!CSopen_bracket]
                      [:k :!CSclose_bracket]
                      [:h :!Copen_bracket]
                      [:l :!Cclose_bracket]]}
             {:des   "Vi Mode [D as Trigger Key]"
              :rules [:vi-mode
                      [:##j :down_arrow]
                      [:##k :up_arrow]
                      [:##h :left_arrow]
                      [:##l :right_arrow]
                      [:##b :!Oleft_arrow]
                      [:##w :!Oright_arrow]
                      [:##0 :!Ta]
                      [:##4 :!Te]]}
             {:des   "Vi Visual Mode"
              :rules [:vi-visual-mode
                      [:##j :!Sdown_arrow]
                      [:##k :!Sup_arrow]
                      [:##h :!Sleft_arrow]
                      [:##l :!Sright_arrow]
                      [:##b :!SOleft_arrow]
                      [:##e :!SOright_arrow]
                      [:##0 :!SCleft_arrow]
                      [:##4 :!SCright_arrow]
                      [:##open_bracket :!SOup_arrow]
                      [:##close_bracket :!SOdown_arrow]]}
             {:des   "launcher mode"
              :rules [:launch-mode
                      [:j [:open "/Applications/Alacritty.app"]]
                      ;; [:j [:launch "iTerm"]]
                      ;; [:k [:open "/Applications/Emacs.app"]]
                      [:k [:show "Emacs"]]
                      ;; [:k [:launch "Emacs"]]
                      [:quote [:opena "ClickUp"]]
                      [:t [:open "/Applications/Todoist.app"]]
                      [:p [:open "/Applications/Figma.app"]]
                      [:l [:open "/Applications/Google Chrome.app/"] :!Chromes]
                      [:l :same_wind_app :Chromes]
                      [:comma [:open "/Applications/Firefox Developer Edition.app/"] :!Firefoxes]
                      [:comma :same_wind_app :Firefoxes]
                      ;; [:n [:open "/Applications/Notion.app"]]
                      [:n [:open "/Applications/Google Chrome Canary.app"]]
                      [:return_or_enter [:open "/Applications/Microsoft Edge Beta.app"]]
                      ;; [:m [:open "/Applications/Mail.app"]]
                      [:m [:launch "Mail"]]
                      ;; [:v [:open "/Applications/WeChat.app"]]
                      [:v [:launch "WeChat"]]
                      [:q [:open "/Applications/Karabiner-Elements.app"]]
                      [:f [:open "/System/Library/CoreServices/Finder.app"]]
                      [:9 [:open "/Applications/PDF Expert.app"]]
                      [:h [:open "/Applications/Slack.app"]]
                      [:r [:opena "Roam Research"]]
                      [:period [:open "/Applications/SetApp/Paw.app"]]
                      [:equal_sign [:open "/Applications/Textual.app"]]
                      [:8 [:open "/Applications/Karabiner-EventViewer.app"]]
                      [:b [:open "/Applications/Bee.app"]]
                      [:c [:open "/Applications/Visual Studio Code.app"]]
                      [:e [:w :e]]
                      [:hyphen [{:key :m :modi :ro}
                                {:key :a :modi :ro}
                                {:key :i :modi :ro}
                                {:key :n :modi :ro}
                                {:key :r :modi :ro}
                                {:key :e :modi :ro}
                                {:key :b :modi :ro}
                                {:key :l :modi :ro}]]
                      [:d [{:key :c :modi :ro}
                           {:key :h :modi :ro}
                           {:key :r :modi :ro}
                           {:key :o :modi :ro}
                           {:key :m :modi :ro}
                           {:key :i :modi :ro}
                           {:key :u :modi :ro}
                           {:key :m :modi :ro}
                           {:key :n :modi :ro}
                           {:key :d :modi :ro}
                           {:key :b :modi :ro}
                           :return_or_enter]]]}
             {:des   "caps_lock"
              :rules [[:##caps_lock :left_control nil {:alone :escape}]]}
             {:des   "return_or_enter to control when pressed with other keys"
              :rules [[:##return_or_enter :left_control [["tmux-windmove-mode" 0] ["k2-mode" 0]] {:alone :return_or_enter}]]}
             {:des   "HHKB, FILCO MINILA Change left control to esc if alone"
              :rules [[:##left_control :left_control [:hhkb-bt :hhkb :hhkb-tmk :filco-minila] {:alone :escape}]]}
             {:des   "FILCO MINILA Change left_alt to left_command"
              :rules [:filco-minila
                      [:##grave_accent_and_tilde :backslash]
                      [:##backslash :grave_accent_and_tilde]
                      [:##left_option :left_command]
                      [:##right_option :right_command nil {:alone [:!Ctab]}]
                      [:##left_command :left_option]
                      [:##application :right_option nil {:alone ["osascript ~/Dropbox/sync/Automator/switch-to-second-previous-app.scpt"]}]]}
             {:des   "Change right_command to command-tab when used alone"
              :rules [[:right_command :right_command nil {:alone :prev_app}]
                      [:application :right_command nil {:alone :prev_app}]]}
             {:des   "Change left_option to f18 when used alone"
              :rules [[:left_option :left_option nil {:alone [:f18]}]]}
             {:des   "Quit application by pressing command-q twice"
              :rules [[:!C#Pq [:!Cq ["command-q" 0]] ["command-q" 1]]
                      [:!C#Pq ["command-q" 1] nil {:delayed {:invoked ["command-q" 0] :canceled ["command-q" 0]}}]]}
             {:des   "Change right_option to switch to second recent application when used alone"
              :rules [[:right_option :left_option nil {:alone ["osascript ~/Dropbox/sync/Automator/switch-to-second-previous-app.scpt"]}]]}
             {:des   "some simultaneous keys"
              :rules [[[:h :l] [[:alf "helpSearch" "com.tedwise.menubarsearch"] ["in-alfred" 1]]]
                      [[:j :l] [:f19 ["in-alfred" 1]]]
                      [[:l :n] [[:alf "winswitch" "ru.mandrigin.alfred.sww"] ["in-alfred" 1]]]]}
             {:des   "alfred mode"
              :rules [[:l :!COi :browsers-alfred-mode]
                      [:9 [:!Cl [:type "chrome://extensions/?id=pkjpciobmjhfjaddkiehmknaclajlkgf"]] :browsers-alfred-mode]
                      [:0 [:!Cl [:type "chrome-extension://pkjpciobmjhfjaddkiehmknaclajlkgf/home.html"]] :browsers-alfred-mode]
                      [:l :!CTslash :finder-alfred-mode]
                      [:!CTk [:!CTk ["in-alfred" 1]]]
                      [:!Tg [:escape ["in-alfred" 0]] ["in-alfred" 1]]
                      :alfred-mode
                      [:i [:z :i]]
                      [:h [[:alf "search repos" "com.yqrashawn.ghjump"] ["in-alfred" 1]]]
                      [:j [:alf "searchGithub" "nikivi.search-the-web"]]
                      [:##return_or_enter [["in-alfred" 1] [:alf "web searches" "nikivi.web.searches"]]]
                      [:x [:alf "killProcess" "com.ngreenstein.alfred-process-killer"]]
                      [:u [:alf "repos" "net.deanishe.alfred-git-repos"]]
                      ;; [:k [[:alf "history" "net.deanishe.alfred.safari"] ["in-alfred" 1]]]
                      [:k [[:alf "chromeHistory" "thomasupton.chrome-history"] ["in-alfred" 1]]]
                      [:m [:alf "tab" "net.deanishe.alfred.safari"]]
                      [:y [:!!grave_accent_and_tilde ["in-alfred" 1]]]
                      [:o :!CTOS0]
                      [:0 [:alf "pasteBack" "yqrashawn.com.ewe"]]
                      [:semicolon [:alf "localport" "in.fech.localport"]]
                      [:q "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"Quick Macro 1\"'"]
                      ;; [:close_bracket :!CTOSclose_bracket]
                      [:close_bracket :!Cf3]
                      [:hyphen :!!hyphen]
                      [:spacebar "~/Dropbox/sync/pullover/pullover-start-or-finish"]
                      #_[:right_command :!!3]]}
             {:des   "q"
              :rules [:emacs-bufmove-mode
                      [:h [:!Tx :9 :w :h]]
                      [:j [:!Tx :9 :w :j]]
                      [:k [:!Tx :9 :w :k]]
                      [:l [:!Tx :9 :w :l]]
                      :emacs-windresize-mode
                      [:h [:!Tx :8 :w :h]]
                      [:j [:!Tx :8 :w :j]]
                      [:k [:!Tx :8 :w :k]]
                      [:l [:!Tx :8 :w :l]]
                      :emacs-windmove-mode
                      [:i [:q :i]]
                      [:h [:!CTO7 :h]]
                      [:j [:!CTO7 :j]]
                      [:k [:!CTO7 :k]]
                      [:l [:!CTO7 :l]]
                      [:u [:!CTO7 :u]]
                      [:r [:!CTO7 :r]]
                      [:v [:!Tx :3]]
                      [:s [:!Tx :2]]
                      [:m [:!Tx :1]]
                      [:b [:!Tx :0]]
                      :tmux-windresize-mode
                      [:h [:!Tq :!Sh]] ;; resize window
                      [:j [:!Tq :!Sj]] ;; resize window
                      [:k [:!Tq :!Sk]] ;; resize window
                      [:l [:!Tq :!Sl]] ;; resize window
                      :tmux-windmove-mode
                      [:return_or_enter [:!Tq :c]] ;; new session
                      ;; [:comma [:!Tq :comma]] ;; rename tmux pane
                      [:m [:!Tq :z]]     ;; size window
                      [:f [:!Tq :slash]] ;; find and switch window
                      [:w [:!Tq :w]]     ;; list and switch window/pane
                      [:b [:!Tq :x]]     ;; kill pane
                      [:open_bracket [:!Tq :open_bracket]] ;; esc
                      [:h [:!Tq :h]]                       ;; focuse window
                      [:j [:!Tq :j]]                       ;; focuse window
                      [:k [:!Tq :k]]                       ;; focuse window
                      [:l [:!Tq :l]]                       ;; focuse window
                      [:v [:!Tq :!Shyphen]]                ;; v split
                      [:s [:!Tq :hyphen]]                  ;; s split
                      [:n [:!Tq :!Tl]]
                      [:p [:!Tq :!Th]]
                      [:comma [:!Tq :!Th]]
                      [:period [:!Tq :!Tl]]
                      [:1 [:!Tq :1]]
                      [:2 [:!Tq :2]]
                      [:3 [:!Tq :3]]
                      [:4 [:!Tq :4]]
                      [:5 [:!Tq :5]]]}
             {:des   "yabai mode"
              :rules [ ;; :yabai-insert-mode
                      ;; [:h "/usr/local/bin/yabai -m window --insert west"]
                      ;; [:j "/usr/local/bin/yabai -m window --insert south"]
                      ;; [:k "/usr/local/bin/yabai -m window --insert north"]
                      ;; [:l "/usr/local/bin/yabai -m window --insert east"]

                      ;; move windows
                      :yabai-move-mode
                      [:h "/usr/local/bin/yabai -m window --warp west"]
                      [:j "/usr/local/bin/yabai -m window --warp south"]
                      [:k "/usr/local/bin/yabai -m window --warp north"]
                      [:l "/usr/local/bin/yabai -m window --warp east"]
                      ;; scale windows
                      :yabai-scale-mode
                      [:h "~/local/bin/yabai-resize left"]
                      [:j "~/local/bin/yabai-resize down"]
                      [:k "~/local/bin/yabai-resize up"]
                      [:l "~/local/bin/yabai-resize right"]
                      :tab-mode
                      [:grave_accent_and_tilde "launchctl kickstart -k \"gui/${UID}/homebrew.mxcl.yabai\""]
                      ;; focus mode
                      [:h "/usr/local/bin/yabai -m window --focus west"]
                      [:j "/usr/local/bin/yabai -m window --focus south"]
                      [:k "/usr/local/bin/yabai -m window --focus north"]
                      [:l "/usr/local/bin/yabai -m window --focus east"]
                      [:n "/usr/local/bin/yabai -m window --focus next"]
                      [:p "/usr/local/bin/yabai -m window --focus prev"]

                      ;; yabai workspace
                      ;; [:1 "/usr/local/bin/yabai -m space --focus 1"]
                      ;; [:2 "/usr/local/bin/yabai -m space --focus 2"]
                      ;; [:3 "/usr/local/bin/yabai -m space --focus 3"]
                      ;; [:4 "/usr/local/bin/yabai -m space --focus 4"]
                      [:a "/usr/local/bin/yabai -m window --toggle float"]
                      ;; [:0 "/usr/local/bin/yabai -m window --toggle sticky"]
                      [:0 "/usr/local/bin/yabai -m window --toggle zoom-parent"]
                      [:spacebar "/usr/local/bin/yabai -m window --toggle zoom-fullscreen"]
                      [:b "/usr/local/bin/yabai -m window --layout bsp"]
                      [:m "/usr/local/bin/yabai -m window --toggle zoom-parent"]
                      [:x "/usr/local/bin/yabai -m window --close"]
                      [:delete_or_backspace "/usr/local/bin/yabai -m window --close"]
                      [:open_bracket "/usr/local/bin/yabai -m window --space prev"]
                      [:close_bracket "/usr/local/bin/yabai -m window --space next"]]}
             {:des   "totalspace 2"
              :rules [ ;; move windows
                      :yabai-move-mode
                      [:i :!STOleft_arrow]
                      [:o :!STOright_arrow]
                      :tab-mode
                      ;; focus mode
                      [:i :!OSleft_arrow]
                      [:o :!OSright_arrow]]}

             {:des   "comma mode"
              :rules [:comma-mode
                      [:a :open_bracket]
                      [:s :close_bracket]
                      [:d :!S7]
                      [:f :!S8]
                      [:q :!Shyphen]
                      [:w :!Sequal_sign]
                      [:e :!S5]
                      [:r :!S6]]}
             {:des   "period mode"
              :rules [:period-mode
                      [:comma ["period-comma-mode" 1] nil {:alone :comma :afterup ["period-comma-mode" 0]}]
                      [:a :home_dir]
                      [:s :regex_match_any]
                      [:d :left_paren]
                      [:f :right_paren]
                      [:q :hyphen]
                      [:w :equal_sign]
                      [:e :!Sopen_bracket]
                      [:r :!Sclose_bracket]]}
             {:des   "chrome debug mode"
              :rules [:!Debuggers
                      [:f10 :mute]
                      [:condi :Debuggers :tab-mode]
                      ;; step in
                      [:q :!Csemicolon]
                      ;; step out
                      [:w :!CSsemicolon]
                      ;; step over
                      [:e :f10]
                      ;; step
                      [:r :f9]
                      ;; de/activate breakpoints
                      [:t :!Cf8]
                      ;; pause/resume
                      [:1 :!Cbackslash]
                      ;; continue to here
                      [:2 "~/local/bin/cliclick kd:ctrl c:+0,+0 ku:ctrl t:continue kp:return"]]}
             {:des   "Mouse button"
              :rules [[{:pkey :button5} :mission_control]
                      [{:pkey :button4} [{:pkey :button1} {:pkey :button1} :!!grave_accent_and_tilde]]]}
             {:des   "Mouse Keys Mode v4 (rev 1)"
              :rules [[:##j {:mkey {:vwheel 32}} [["mouse_keys_mode_v4_scroll" 1]] ["mouse_keys_mode_v4" 1]]
                      [:##h {:mkey {:hwheel 32}} [["mouse_keys_mode_v4_scroll" 1]] ["mouse_keys_mode_v4" 1]]
                      [:##k {:mkey {:vwheel -32}} [["mouse_keys_mode_v4_scroll" 1]] ["mouse_keys_mode_v4" 1]]
                      [:##l {:mkey {:hwheel -32}} [["mouse_keys_mode_v4_scroll" 1]] ["mouse_keys_mode_v4" 1]]
                      :mouse_keys_mode_v4
                      [:##j {:mkey {:y 3072}}]
                      [:##k {:mkey {:y -3072}}]
                      [:##h {:mkey {:x -3072}}]
                      [:##l {:mkey {:x 3072}}]
                      [:##v {:pkey :button1}]
                      [:##b {:pkey :button3}]
                      [:##n {:pkey :button2}]
                      [:##s ["mouse_keys_mode_v4_scroll" 1] nil {:afterup ["mouse_keys_mode_v4_scroll" 0]}]
                      [:##f {:mkey {:speed 0.5}}]]}
             {:des   "REBL key bindings"
              :rules [:REBL
                      [:l :!Cright_arrow]
                      [:h :!Cleft_arrow]
                      [:!Sa :!CSleft_arrow]
                      [:b :!Tb]
                      [:v :!Tv]
                      [:k :!Tup_arrow]
                      [:j :!Tdown_arrow]]}
             {:des   "Emacs key bindings [control+keys] (rev 10)"
              :rules [[:!T#Sy :!Cv :!Emacs]
                      :!emacs-mode-disable-app
                      [:!Ob :!Oleft_arrow]
                      [:!Of :!Oright_arrow]
                      [:!Ow :!Cc]
                      [:!T#Od :delete_forward :!Firefoxes]
                      [:!T#Oh :delete_or_backspace]
                      [:!T#SOw :!Odelete_or_backspace]
                      [:!T#Oi :tab]
                      [:!T#Oopen_bracket :escape]
                      [:!T#OSm :return_or_enter]
                      [:!T#OSb :left_arrow]
                      [:!T#OSf :right_arrow]
                      [:!T#OSb :left_arrow]
                      [:!T#OSn :down_arrow]
                      [:!T#OSp :up_arrow]
                      [:!T#Sv :page_down]
                      [:!T#Sa :!Cleft_arrow]
                      [:!T#Se :!Cright_arrow]]}
             {:des   "misc"
              ;; https://superuser.com/a/324267
              :rules [#_[:!CSl [:!Cl :j :a :v :a :s :c :r :i :p :t :!Ssemicolon :return_or_enter] :Chromes]
                      [:!CSl [:f6] :Firefoxes]]}
         {:des "colonkey (shift)"
         :rules [:semicolon-mode
                 [:1 :!T1]
                 [:2 :!T2]
                 [:3 :!T3]
                 [:4 :!T4]
                 [:5 :!T5]
                 [:q :!Sq]
                 [:w :!Sw]
                 [:e :!Se]
                 [:r :!Sr]
                 [:t :!St]
                 [:y :!Sy]
                 [:u :!Su]
                 [:i :!Si]
                 [:o :!So]
                 [:p :!Sp]
                 [:a :!Sa]
                 [:s :!Ss]
                 [:d :!Sd]
                 [:f :!Sf]
                 [:g :!Sg]
                 [:h :!Sh]
                 [:j :!Sj]
                 [:k :!Sk]
                 [:l :!Sl]
                 [:grave_accent_and_tilde [:!Sgrave_accent_and_tilde]] ; -> ~
                 [:z :!Sz]
                 [:x :!Sx]
                 [:c :!Sc]
                 [:v :!Sv]
                 [:b :!Sb]
                 [:n :!Sn]
                 [:m :!Sm]]}
        {:des "swap : and ;"
         :rules [[:#Psemicolon :!Ssemicolon]
                 [:!Ssemicolon :semicolon]]}
        {:des "left cmd -> cmd+tab"
         :rules [[:left_command :left_command nil {:alone :!Ctab}]]}
        ;{:des "right cmd -> Alfred"
        ; :riIules [[:right_command :right_command nil {:alone :!CTOSspacebar}]]}
        ;{:des "§ -> Karabiner on/off"
        ; :rules [[:non_us_backslash [:km "Karabiner on/off"]]]}
        {:des "jsim"
         :rules [[[:j :k] [:alfred "search google" "net.deanishe.alfred-searchio"]]
                 [[:j :semicolon] [:alfred "search tabs" "net.deanishe.alfred.safari"]]
                 ;[[:j :semicolon] :!COS9] ; Raycast
                 [[:j :l] :!CTOSspacebar]]} ; Alfred
        {:des "ksim"
         :rules [[[:k :l] [:alfred "search dash" "com.kapeli.dash.workflow"]]
                 [[:k :m] [:alfred "search youtube" "net.deanishe.alfred-searchio"]]]}
        {:des "2key (move + alfred)"
         :rules [:2-mode
                 [:o [:alfred "soulver" "app.soulver.alfredworkflow"]]
                 [:j :!Cdown_arrow]
                 [:k :!Cup_arrow]
                 [:l :!Cright_arrow]
                 [:h :!Cleft_arrow]
                 [:semicolon :!Oup_arrow]
                 [:quote :!Odown_arrow]
                 [:spacebar :!COSu]]} ; Selection -> HN
        {:des "3key (open files + projects)"
         :rules [:3-mode
                 [:r [:km "proj: LA"]]
                 [:i [:km "edit: Likes"]]
                 [:o [:km "edit: Projects"]]
                 [:t [:km "edit: Git config"]]
                 [:h [:km "wiki: Used hotkeys"]]
                 [:j [:km "edit: Aliases"]]
                 [:k [:km "edit: Zsh functions"]]
                 ;[:l [:km "Search current safari url in wiki"]]
                 [:l [:km "proj: epictools.dev"]]
                 [:semicolon [:km "proj: Knowledge"]]
                 [:quote [:km "wiki: Summary"]]
                 [:n [:km "proj: Dotfiles"]]
                 [:m [:km "proj: Home"]]
                 [:comma [:km "edit: Now"]]
                 [:period [:km "edit: GitHub Bio"]] ; TODO: 
                 [:spacebar :!CSOp]]} ; Selection -> Reddit
        {:des "4key (open curated lists)"
         :rules [:4-mode
                 [:r [:km "edit: Web Searches"]]
                 [:t [:km "list: Newsletters"]]
                 [:o [:km "list: Blogs"]]
                 [:p [:km "list: Podcasts"]]
                 [:k [:km "list: Alfred workflows"]]
                 [:l [:km "list: Command line tools"]]
                 [:n [:km "list: Events"]]]}
        {:des "tabkey (websites)"
         :rules [:tab-mode
                 ;[:j :!SOTw] ; Replies
                 ;[:k :!SOTf] ; App specific
                 ;[:l :!SOTr] ; Personal
                 [:j [:km "w: nikitavoloboev.xyz"]]
                 [:k [:km "w: GitLab"]]
                 [:l [:km "w: Repl.it"]]
                 [:period [:km "w: CodeSandbox"]]]}
        {:des "qkey (cmd + shift)"
         :rules [:q-mode
                 [:3 :!CS3]
                 [:4 :!CS4]
                 [:5 :!CS5]
                 [:6 :!CS6]
                 [:7 :!CS7]
                 [:8 :!CS8]
                 [:9 :!CS9]
                 [:0 :!CS0]
                 [:w :!CSw]
                 [:e :!CSe]
                 [:r :!CSr]
                 [:t :!CSt]
                 [:y :!CSy]
                 [:u :!CSu]
                 [:i :!CSi]
                 [:o :!CSo]
                 [:p :!CSp]
                 [:open_bracket :!CSopen_bracket]
                 [:close_bracket :!CSclose_bracket]
                 [:a :!CSa]
                 [:s :!CSs]
                 [:d :!CSd]
                 [:f :!CSf]
                 [:g :!CSg]
                 [:h :!CSh]
                 [:j :!CSj]
                 [:k :!CSk]
                 [:l :!CSl]
                 [:semicolon :!CSsemicolon]
                 [:quote :!CSquote]
                 [:z :!CSz]
                 [:x :!CSx]
                 [:c :!CSc]
                 [:v :!CSv]
                 [:b :!CSb]
                 [:n :!CSn]
                 [:m :!CSm]
                 [:comma :!CScomma]
                 [:period :!CSperiod]
                 [:slash :!CSslash]
                 [:spacebar :!CSOe]]} ; Selection -> YouTube
        {:des "wkey (apps)"
         :rules [:w-mode
                 [:e [:km "open: Fantastical"]]
                 [:r [:km "open: Notion"]]
                 [:t [:km "open: Activity Monitor"]]
                 ;[:i [:km "open: Instruments"]]
                 [:i [:km "open: Obsidian"]]
                 [:o [:km "open: Keyboard Maestro"]]
                 [:p [:km "open: Postgres"]]
                 [:caps_lock [:km "open: Finder"]]
                 [:a :!OSC1] ; Open Dash
                 [:d [:km "open: Postico"]]
                 [:f [:km "open: 2Do"]]
                 [:g [:km "open: Linear"]]
                 ;[:h [:km "open: Safari Technology Preview"]]
                 [:h [:km "open: Android Emulator"]]
                 [:j [:km "open: iTerm"]]
                 [:k [:km "open: Safari"]]
                 [:l [:km "open: VS Code"]]
                 [:semicolon [:km "open: Xcode"]]
                 [:quote [:km "open: Console"]]
                 [:c [:km "open: Spotify"]]
                 [:v [:km "open: Paw"]]
                 [:b [:km "open: BetterTouchTool"]]
                 [:n [:km "open: Sublime Text"]]
                 [:m [:km "open: Sublime Merge"]]
                 [:comma [:km "open: Proxyman"]]
                 [:period [:km "open: Cypress"]]
                 [:spacebar :!CT7]]} ; Start Google search with selection
        {:des "ekey (cmd)"
         :rules [:e-mode
                 [:q :!Cq]
                 [:w :!Cw]
                 [:r :!Cr]
                 [:t :!Ct]
                 [:u :!Cu]
                 [:i :!Ci]
                 [:p :!Cp]
                 [:open_bracket :!Copen_bracket]
                 [:close_bracket :!Cclose_bracket]
                 [:semicolon :!Csemicolon]
                 [:quote :!Cquote]
                 [:comma :!Ccomma]
                 [:period :!Cperiod]
                 [:slash :!Cslash]
                 [:a :!Ca]
                 [:b :!Cb]
                 [:c :!Cc]
                 [:d :!Cd]
                 [:f :!Cf]
                 [:g :!Cg]
                 [:h :!Ch]
                 [:j :!Cj]
                 [:k :!Ck]
                 [:l :!Cl]
                 [:m :!Cm]
                 [:n :!Cn]
                 [:o :!Co]
                 [:s :!Cs]
                 [:v :!Cv]
                 [:x :!Cx]
                 [:y :!Cy]
                 [:z :!Cz]
                 [:1 :!C1]
                 [:2 :!C2]
                 [:3 :!C3]
                 [:4 :!C4]
                 [:5 :!C5]
                 [:6 :!C6]
                 [:7 :!C7]
                 [:8 :!C8]
                 [:9 :!C9]
                 [:0 :!C0]
                 [:spacebar :!CSO7]]} ; Selection -> Google Lucky
        {:des "rkey (apps)"
         :rules [:r-mode
                 [:tab [:km "open: Transmission"]]
                 [:q [:km "open: IINA"]]
                 [:w [:km "open: 1Password"]]
                 [:e [:km "open: Keynote"]]
                 ;[:i [:km "open: Flume"]]
                 [:i [:km "open: Feedback Assistant"]]
                 [:o [:km "open: Developer"]]
                 ;[:caps_lock [:km "open: Preview"]]
                 [:a [:km "open: Alfred Preferences"]]
                 [:j [:km "open: Dictionary"]]
                 [:k [:km "open: Preview"]]
                 [:l [:km "open: Books"]]
                 ;[:k [:km "open: PDF Expert"]]
                 ;[:l [:km "open: Reeder"]]
                 [:b [:km "Edit keyboard shortcuts"]]
                 [:n [:km "open: ScreenFlow"]]
                 [:m [:km "open: OBS"]]
                 [:comma [:km "open: Arq"]]
                 [:period [:km "open: Final Cut Pro"]]
                 [:spacebar :!COSx]]} ; Selection -> Reddit
        {:des "tkey (palettes + websites)"
         :rules [:t-mode
                 [:0 [:km "w: regex101"]]
                 [:e [:km "w: Facebook"]]
                 [:u [:km "w: Medium"]]
                 [:i [:km "w: Arxiv"]]
                 [:o [:km "w: Stack Overflow"]]
                 [:p [:km "w: Dropbox"]]
                 [:a [:km "w: Amazon"]]
                 [:h [:km "w: Twitch"]]
                 [:j :!COSo] ; Safari URL -> Twitter
                 ;[:j :!COSo] ; Safari URL -> Google
                 ;[:k :!COSo] ; Safari URL -> HN
                 ;[:l :!COSo] ; Safari URL -> Lobsters
                 [:semicolon [:km "w: Netlify"]]
                 [:z [:km "w: MDN"]]
                 [:b [:km "w: Observable"]]
                 [:m [:km "w: Meetup"]]
                 [:comma [:km "w: Google Drive"]]
                 [:period [:km "w: IFTTT"]]
                 [:spacebar :!COSr]]} ; Selection -> Google Translate
        {:des "ikey (symbols)"
         :rules [:i-mode
                 [:1 :!S1]
                 [:2 :!S2]
                 [:3 :!Sequal_sign]
                 [:4 :!S8]
                 [:5 :!S5]
                 [:q :!Sopen_bracket]
                 [:w :!S9]
                 [:e :!S3]
                 [:r :!Squote]
                 [:t :quote]
                 [:o :open_bracket] ; [
                 [:p :close_bracket] ; ]
                 [:open_bracket :!Sclose_bracket] ; }
                 [:caps_lock [:km "Match symbols"]]
                 [:a :slash]
                 [:s :!Shyphen]
                 [:d :backslash]
                 [:f :hyphen]
                 [:g :!S4]
                 [:j :equal_sign]
                 [:l [:hyphen :!Speriod :spacebar]] ; -> arrow (->)
                 [:semicolon :semicolon]
                 [:grave_accent_and_tilde :!Sgrave_accent_and_tilde] ; -> //
                 [:z :!Sslash]
                 [:x :!Sbackslash]
                 [:c :!S7]
                 [:v :!Scomma]
                 [:b [:slash :slash :spacebar]]]} ; -> //
        {:des "okey (alfred)"
         :rules [:o-mode
                 [:1 :!C1]
                 [:2 :!C2]
                 [:3 :!C3]
                 [:4 :!C4]
                 [:5 :!C5]
                 [:6 :!C6]
                 [:q [:alfred "search downloads" "recentdownloads.ddjfreedom"]]
                 [:w :!CObackslash] ; 1Password search
                 [:e [:km "Make 2Do task"]]
                 [:r [:km "Make 2Do task with note as current URL"]]
                 [:t [:km "Make 2Do task with Safari title as name + note as current URL"]]
                 [:i [:alfred "search alfred" "nikivi.utilities" "?"]]
                 [:caps_lock [:alfred "search desktop" "com.vitorgalvao.alfred.directories"]]
                 [:a [:alfred "search files" "nikivi.manage.notes"]] ; TODO: add blog, drafts
                 [:s [:alfred "search code" "nikivi.manage.notes"]]
                 [:d [:alfred "search repos" "net.deanishe.alfred-git-repos"]]
                 [:f [:alfred "search folders" "nikivi.search.folders"]]
                 [:g :!COS9] ; Raycast
                 ;[:g [:km "2Do with current url as note (github)"]]
                 [:j [:alfred "run" "iansinnott.keyboardmaestro"]]
                 [:k [:alfred "search menu bar" "com.tedwise.menubarsearch"]]
                 [:grave_accent_and_tilde [:alfred "search processes" "com.vitorgalvao.alfred.processcontrol"]]
                 [:x [:alfred "search workflows" "org.jeef.workflowdirectory"]]
                 [:c [:alfred "search emoji" "com.github.jsumners.alfred-emoji"]]
                 [:v [:alfred "search clones" "com.vitorgalvao.alfred.directories"]]
                 [:b [:km "Add 2Do with current url as note (github)"]]
                 [:n [:alfred "search lists" "nikivi.learn.anything"]]
                 [:m [:alfred "search lists" "nikivi.awesome.lists"]]
                 [:spacebar [:alfred "search PDFs" "nikivi.search.files"]]]}
        {:des "capskey (todo + trello)"
         :rules [:caps-mode
                 [:1 [:alfred "Screenshot -> Imgur" "com.vitorgalvao.alfred.webscreenshot"]]
                 [:2 :!TO2] ; Screenshot -> Clipboard
                 [:3 :!TO3] ; Screenshot -> Annotate
                 [:4 :!TO9] ; Picture of screen -> Clipboard
                 [:5 :!TO0] ; Picture of screen -> ~/Desktop
                 [:w [:km "wiki: My workflow"]]
                 [:e [:km "edit: Private notes"]]
                 [:r [:km "wiki: Rules"]]
                 [:t [:km "wiki: Processes"]]
                 [:u [:km "Open 2Do Buy"]]
                 [:i [:km "Open 2Do Fix"]]
                 [:o [:km "Open 2Do Tools"]]
                 [:p [:km "Open 2Do Repeat"]]
                 [:open_bracket [:km "w: Goodreads (currently reading)"]]
                 [:close_bracket [:km "w: Goodreads (next)"]]
                 [:s [:km "Open 2Do Wiki"]]
                 [:d [:open "notion://nikitavoloboev/Ideas-0b5a4e8a88f34fe29a1f33dad02e5332"]]
                 [:f [:km "Search 2Do"]]
                 [:g [:km "Open 2Do Life"]]
                 [:h [:open "notion://nikitavoloboev/Learn-05c0eac7be904e0da89cd8a3bf7ab509"]]
                 [:j [:km "Open 2Do Today"]]
                 [:k [:km "Open 2Do GitHub"]]
                 [:l [:km "Open 2Do Later"]]
                 [:semicolon [:km "Open 2Do Starred"]]
                 ;[:quote [:km "Open 2Do Other"]] ; TODO: remove once its empty
                 [:c [:km "Look back"]]
                 [:v [:km "wiki: Goals"]]
                 [:b [:open "notion://nikitavoloboev/Papers-Courses-8f00c7c500d5460490a5800c5d5db431"]]
                 [:n [:km "Open 2Do Clean"]]
                 [:m [:km "Open 2Do Work"]]
                 [:comma [:km "Open 2Do LA"]]
                 [:period [:km "Open 2Do Recent"]]]}
        {:des "akey (ctrl)"
         :rules [:a-mode
                 [:2 :!T2]
                 [:3 :!T3]
                 [:4 :!T4]
                 [:5 :!T5]
                 [:6 :!T6]
                 [:7 :!T7]
                 [:8 :!T8]
                 [:9 :!T9]
                 [:0 :!T0]
                 [:q :!Tq]
                 [:w :!Tw]
                 [:e :!Te]
                 [:r :!Tr]
                 [:t :!Tt]
                 [:i :!Ti]
                 [:o :!To]
                 [:y :!Ty]
                 [:u :!Tu]
                 [:p :!Tp]
                 [:open_bracket :!Topen_bracket]
                 [:close_bracket :!Tclose_bracket]
                 [:s :!Ts]
                 [:d :!Td]
                 [:f :!Tf]
                 [:g :!Tg]
                 [:h :!Th]
                 [:j :!Tj]
                 [:k :!Tk]
                 [:l :!Tl]
                 [:semicolon :!Tsemicolon]
                 [:quote :!Tquote]
                 [:z :!Tz]
                 [:x :!Tx]
                 [:c :!Tc]
                 [:v :!Tv]
                 [:b :!Tb]
                 [:n :!Tn]
                 [:m :!Tm]
                 [:comma :!Tcomma]
                 [:period :!Tperiod]
                 [:slash :!Tslash]
                 [:spacebar :!CT9]]} ; Selection -> Google
        {:des "skey (essential)"
         :rules [:s-mode
                 [:w [:!Oleft_arrow :!OSright_arrow]] ; Highlight word
                 [:e :tab]
                 [:r :!Stab]
                 [:t :!Sreturn_or_enter]
                 [:u :!COp] ; Selection -> HasteBin link
                 [:i :!CTperiod] ; Contexts search active windows
                 [:o :!Cx] ; Cut
                 ;[:open_bracket :!Oleft_arrow]
                 [:open_bracket [:km "Lowercase selected text"]]
                 [:close_bracket [:km "Uppercase selected text"]]
                 [:a :!Cc] ; Copy
                 [:d :delete_or_backspace]
                 [:f :return_or_enter]
                 [:g :!Ctab]
                 [:##h :left_arrow]
                 [:##j :down_arrow]
                 [:##k :up_arrow]
                 [:##l :right_arrow]
                 [:semicolon :!CTO0] ; Search Alfred Snippets
                 [:quote [:!Cleft_arrow :!CSright_arrow]] ; Highlight current line
                 [:c :!Cdelete_or_backspace]
                 [:v :left_shift]
                 [:##b :!Cleft_arrow]
                 [:n :!Cv] ; Paste
                 [:##m :!Cright_arrow]
                 [:period :!COS0]]} ; Selection -> Alfred Snippets TODO: 
        {:des "dkey (mouse)"
         :rules [:d-mode
                 [:i :!Ckeypad_hyphen] ; Zoom out
                 [:o :!Ckeypad_plus] ; Zoom in
                 [:a [:!Cc :!Ctab]] ; Copy & activate previous app
                 [:j {:mkey {:vwheel 60}}] ; Scroll down
                 [:k {:mkey {:vwheel -60}}] ; Scroll up
                 [:l [:km "Google clipboard"]]
                 ;[:l [:km "Google selected word"]]
                 [:semicolon [:km "Google Searchio selected word"]]
                 [:quote [:km "Select line and google"]]
                 [:z {:pkey :button2}] ; Right click
                 [:v {:pkey :button1}] ; Left click
                 [:b {:pkey :button3}] ; Middle click
                 [:n [:km "Open URL in clipboard in Safari"]]
                 [:m [:km "Google Lucky selected word"]]
                 [:comma :!TO8] ; Show Launchpad
                 [:period :!CTO3] ; Mission control
                 [:spacebar :!CT8]]} ; Selection -> Dictionary (wiki)
        {:des "fkey (essential)"
         :rules [:f-mode
                 [:1 [:km "View Sip"]]
                 [:2 [:km "Go to test macro"]]
                 [:3 [:km "New global macro"]] ; TODO: create global macro from Test (clear test, focus on naming new macro)
                 [:tab [:km "Test"]]
                 ;[:q [:km "open: Photos"]]
                 ;[:w [:km "open: Simulator / Xcode"]]
                 ;[:q [:km "edit: 1st Safari tab"]]
                 ;[:q [:km "open: Figma"]]
                 [:q [:km "open: Chrome Canary"]]
                 [:w [:km "Save link"]]
                 [:e :!CO8] ; Alfred clipboard history search
                 [:r [:km "Centre mouse to active app"]]
                 [:i :!Treturn_or_enter]
                 [:o :!Oreturn_or_enter]
                 [:p :!CTOc] ; Sleep
                 [:open_bracket :!CT5] ; Turn display on/off
                 [:caps_lock :!CTOu] ; Sip color picker
                 [:a [:km "open: Figma"]]
                 [:s [:km "edit: 2nd iTerm tab"]]
                 [:d [:km "Save link (top)"]]
                 [:h [:km "Make markdown link from selection {link}"]]
                 [:j [:km "edit: 1st iTerm tab"]]
                 [:k :return_or_enter]
                 [:l :!Creturn_or_enter]
                 [:semicolon [:km "open: MindNode"]]
                 [:quote [:km "Goku Run"]]
                 [:z :!Ospacebar] ; Switch language (Russian <-> English)
                 [:n :!Freturn_or_enter]
                 [:m :!Sreturn_or_enter]
                 [:comma  [:km "Add safari link to selected markdown text"]]
                 [:period [:km "edit: Karabiner"]]
                 [:slash :!CTO4] ; Alfred file action
                 [:spacebar :!CTq]]} ; Selection -> Web Searches
        {:des "gkey (actions)"
         :rules [:g-mode
                 [:q :!CT3] ; Search bartender menu items
                 [:w :!CSgrave_accent_and_tilde] ; Switch between active windows (go up)
                 [:caps_lock [:km "Go to KM group of current app from picklist"]]
                 [:a [:km "Go to KM group of current app"]]
                 [:s [:km "Dismiss notifications"]]
                 [:h :!CSOa] ; Move window left
                 [:j :!Cgrave_accent_and_tilde] ; Switch between active windows  (go down)
                 [:k :!COSf] ; Maximize window
                 [:l :!CSOd] ; Move window right
                 [:semicolon :!COSs] ; Move window between different screen & maximize (iPad)
                 [:z :!CO0] ; Show Dropzone dropdown
                 [:n :!CTOg] ; Turn on/off notifications
                 [:m :!COslash] ; Show/hide notification centre
                 [:period :!COS6]]} ; Toggle Night Shift on/off.
        {:des "tilkey (actions + language switches)"
         :rules [:tilde-mode
                 [:w [:alfred "toggle wifi" "nikivi.wifi.tools"]]
                 [:e :!CTk] ; Turn on/off BTT TouchBar
                 [:r [:alfred "restart wifi" "nikivi.wifi.tools"]]
                 [:d [:km "Commit dotfiles"]]
                 [:f [:km "Commit home"]]
                 ;[:f [:km "Commit learning"]]
                 ;[:j [[:km "JS Dash profile"] ["in-python" 0] ["in-go" 0] ["in-js" 1] ["in-elixir" 0] ["in-rust" 0] ["in-swift" 0]]] ; JS
                 [:j [[:open "dash://.js:"] ["in-python" 0] ["in-go" 0] ["in-js" 1] ["in-elixir" 0] ["in-rust" 0] ["in-swift" 0]]] ; JS
                 ;[:j [[:open "dash://.jsts:"] ["in-python" 0] ["in-go" 0] ["in-js" 1] ["in-elixir" 0] ["in-rust" 0] ["in-swift" 0]]] ; JS
                 [:k [[:open "dash://.go:"] ["in-python" 0] ["in-go" 1] ["in-js" 0] ["in-elixir" 0] ["in-rust" 0] ["in-swift" 0]]] ; Go
                 [:l [[:open "dash://.python:"] ["in-python" 1] ["in-go" 0] ["in-js" 0] ["in-elixir" 0] ["in-rust" 0] ["in-swift" 0]]] ; Python
                 [:c [:km "Commit code"]]
                 [:v [:km "Commit wiki"]]
                 ;[:n [[:open "dash://.rust:"] ["in-python" 0] ["in-go" 0] ["in-js" 0] ["in-elixir" 0] ["in-rust" 1] ["in-swift" 0]]] ; Rust
                 ;[:n :!STh] ; Record macro
                 ;[:m [[:open "dash://.swift:"] ["in-python" 0] ["in-go" 0] ["in-js" 0] ["in-elixir" 0] ["in-rust" 0] ["in-swift" 1]]] ; Swift
                 [:spacebar :!COSn]]} ; Selection -> GitHub
        {:des "zkey (chat)"
         :rules [:z-mode
                 [:e [:km "open: Telegram"]]
                 [:i [:km "open: WhatsApp"]]
                 [:o [:km "open: Zoom"]]
                 [:p [:km "open: FaceTime"]]
                 [:d [:km "New Spark email"]]
                 [:f [:km "open: Spark"]]
                 [:g [:alfred "search contacts" "nikivi.search.content"]]
                 [:h [:km "Create new contact"]]
                 [:j [:km "open: Discord"]]
                 [:k [:km "open: Telegram"]]
                 [:l [:km "w: Element"]]
                 [:semicolon [:km "open: Slack"]]
                 [:c [:km "open: Contacts"]]
                 [:v [:km "open: Tweetbot"]]
                 [:b [:km "w: Twitter"]]
                 [:n [:km "w: Typefully"]]
                 [:m [:km "w: Typefully with current URL pasted"]]
                 ;[:n [:km "w: Twitter Compose"]]
                 ;[:m [:km "w: Twitter Compose with current URL pasted"]]
                 [:period [:km "w: Twitter Search"]]
                 [:spacebar :!CSOz]]} ; Selection -> Twitter
        {:des "xkey (spotify)"
         :rules [:x-mode
                 [:o [:km "Paste current Spotify song link"]]
                 [:open_bracket [:alfred "twitter_search_current_track" "com.vdesabou.spotify.mini.player"]]
                 [:close_bracket [:alfred "add_current_track_to" "com.vdesabou.spotify.mini.player" "spotify:playlist:2N82DnDsPGMnpJhN8sVFJu"]] ; Add song to Bliss playlist
                 [:j [:alfred "show_alfred_playlist" "com.vdesabou.spotify.mini.player"]]
                 [:k [:alfred "show_current_track" "com.vdesabou.spotify.mini.player"]]
                 [:semicolon [:alfred "add_current_track_to_alfred_playlist_or_your_music" "com.vdesabou.spotify.mini.player"]] ; Add song to Likes playlist
                 [:quote [:alfred "add_current_track_to" "com.vdesabou.spotify.mini.player" "spotify:playlist:0ESjwZeTcHOWzY3FYO5zs5"]] ; Add song to Focus playlist
                 [:n [:alfred "add_current_track_to" "com.vdesabou.spotify.mini.player"]]
                 [:m [:alfred "remove_current_track_from" "com.vdesabou.spotify.mini.player"]]
                 ;[:comma [:alfred "youtube_search_current_track" "com.vdesabou.spotify.mini.player"]] ; TODO: twitter search
                 [:comma [:alfred "show_search_online" "com.vdesabou.spotify.mini.player"]] ; TODO: split up further into binds for direct searches of tracks/artists/all
                 [:period [:alfred "youtube_search_current_track" "com.vdesabou.spotify.mini.player"]]
                 [:slash [:alfred "reddit_search_current_track" "com.vdesabou.spotify.mini.player"]]]}
        {:des "ckey (run + dots)"
         :rules [:c-mode
                 [:tab [:km "proj: Learning"]]
                 [:u [:km "run: Rust"]]
                 [:i [:km "run: Julia"]] ; TODO: maybe use Pluto.jl notebook
                 [:o [:km "run: Deno"]]
                 [:a [:km "Clone repo to ~/clones and open with VS Code"]]
                 [:s [:km "Clone repo to ~/clones"]]
                 ;[:d [:km "Clone repo to ~/src/clones and open with VS Code"]] ; TODO: open with Xcode
                 [:j [:km "run: Bash"]]
                 [:k [:km "run: Go"]]
                 [:l [:km "run: Python"]]
                 [:semicolon [:alfred "search learning" "nikivi.private.directories"]]
                 [:quote [:km "proj: Go"]]
                 [:n [:km "run: Node"]]
                 [:m [:km "run: Swift"]]
                 [:period [:km "edit: Dotfiles Magefile"]]
                 [:spacebar :!CSOy]]} ; Selection -> Stack Overflow
        {:des "vkey (media)"
         :rules [:v-mode
                 [:q :illumination_decrement]
                 [:w :illumination_increment]
                 [:e [:km "Change macOS appearance (dark/light)"]]
                 [:i :display_brightness_decrement]
                 [:o :display_brightness_increment]
                 [:p [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:37i9dQZEVXcMHpP6EcIqNe"]] ; Discover Weekly
                 [:open_bracket [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:0ERn0U4qZIKC8Dy7RrMMsn"]] ; Likes 
                 [:close_bracket [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:2N82DnDsPGMnpJhN8sVFJu"]] ; Bliss
                 ;[:a [:km "Repeat Spotify song"]] ; TODO: do in background
                 [:a [:km "Play/Pause Endel"]]
                 ;[:a [:km "open: Endel"]]
                 ;[:a [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:2xqhXTdxgBg5z9IuOOCIV3"]] ; Endel
                 [:s [:km "Play/Pause Spotify"]]
                 [:d :!CO9] ; Connect/disconnect AirPods
                 [:h :vk_consumer_previous]
                 [:j :mute]
                 [:k :vk_consumer_play]
                 [:l :vk_consumer_next]
                 [:semicolon [:alfred "spot_mini" "com.vdesabou.spotify.mini.player"]]
                 [:quote [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:5fIL0WiQ79QtgsP4Y4L20V"]] ; Inspired
                 [:backslash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:3zy0JafsRQJgAMU67hnjYX"]] ; Focus Get Hyped
                 [:grave_accent_and_tilde [:alfred "artist_radio" "com.vdesabou.spotify.mini.player"]]
                 [:z [:alfred "song_radio" "com.vdesabou.spotify.mini.player"]]
                 [:b [:alfred "show_playlists" "com.vdesabou.spotify.mini.player"]]
                 [:n :volume_decrement]
                 [:m :volume_increment]
                 [:comma [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:0ESjwZeTcHOWzY3FYO5zs5"]] ; Focus
                 [:period [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:episode:0tYQ3whyQ3GfABnRJ8n3t2"]] ; Rain
                 [:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:5626KdflSKfeDK7RJQfSrE"]] ; Focus song
                 [:spacebar :!CSOv]]} ; Selection -> Google Images
        {:des "bkey (break)"
         :rules [:b-mode
                 [:9 [:alfred "search hn" "com.vitorgalvao.alfred.hackerboard"]]
                 [:0 [:km "w: HN (show new)"]]
                 [:q [:km "w: KM forum"]]
                 [:w [:km "w: Swift forum"]]
                 [:e [:km "w: Behance"]]
                 [:r [:km "w: Medium (network)"]]
                 [:t [:km "w: Medium (bookmarks)"]]
                 [:u [:km "w: Product Hunt"]]
                 [:i [:km "w: Dribble"]]
                 [:o [:km "w: Pinboard"]]
                 [:p [:km "w: Indie Hackers"]]
                 [:open_bracket [:km "w: Reddit Saved"]]
                 [:close_bracket [:km "w: Twitter Bookmarks"]]
                 [:a [:km "w: HN"]]
                 [:s [:km "w: Lobsters"]]
                 [:d [:km "w: Reddit"]]
                 [:f [:km "w: Reddit (all)"]]
                 [:g [:km "w: Alfred Forum"]]
                 [:h [:km "w: Product Hunt (new)"]]
                 [:j [:km "w: Reddit (new)"]]
                 [:k [:km "w: GitHub (front page)"]]
                 [:l [:km "w: Lobsters (new)"]]
                 [:semicolon [:km "w: HN (new)"]]
                 [:quote [:km "w: HckrNews"]]
                 [:z [:km "w: HN (comments)"]]
                 [:x [:km "w: Lobsters (comments)"]]
                 [:n [:km "w: Inoreader"]]
                 [:m [:km "w: Mastodon"]]
                 [:comma [:km "w: GitHub (trending)"]]
                 [:period [:km "w: YouTube (subs)"]]
                 [:slash [:km "w: GitHub (explore)"]]
                 [:spacebar :!TOSs]]} ; Selection -> DuckDuckGo
        {:des "nkey (alfred)"
         :rules [:n-mode
                 [:1 :!O1]
                 [:2 :!O2]
                 [:3 :!O3]
                 [:4 :!O4]
                 [:5 :!O5]
                 [:6 :!O6]
                 [:q [:alfred "search github" "nikivi.search.the.web"]]
                 [:w [:alfred "search twitter" "nikivi.search.the.web"]]
                 [:e [:alfred "search subs" "net.deanishe.alfred-reddit"]]
                 [:r [:alfred "search reddit" "nikivi.search.the.web"]]
                 [:t [:alfred "ssh" "net.deanishe.alfred-ssh"]]
                 [:a [:alfred "search shares" "nikivi.ask.create.share"]]
                 [:s [:alfred "search websites" "nikivi.web.searches"]]
                 [:d [:alfred "search stack overflow" "net.deanishe.alfred-stackoverflow"]]
                 ;[:d [:alfred "search packages" "com.sindresorhus.npms"]]
                 [:f [:alfred "search repos" "me.lachlan.githubjump"]]
                 [:g [:alfred "search godoc" "nikivi.search.the.web"]]
                 [:h [:alfred "search hn" "nikivi.search.the.web"]]
                 [:grave_accent_and_tilde [:alfred "search learn anything" "nikivi.learn.anything"]]
                 [:z [:alfred "search lobsters" "nikivi.search.the.web"]]
                 [:x [:alfred "search stack" "net.deanishe.alfred-stackoverflow"]]
                 [:c [:alfred "search wiki" "nikivi.mind"]]
                 [:v [:alfred "search links" "nikivi.mind"]]
                 ;[:v [:alfred "search pinboard" "nikivi.search.the.web"]] ; TODO: topics/search/more?
                 [:b [:alfred "search bookmarks" "net.deanishe.alfred.safari"]]
                 [:spacebar [:alfred "search history" "net.deanishe.alfred.safari"]]]}
        {:des "mkey (dash)"
         :rules [:m-mode
                 [:3 [:alfred "search alfred" "nikivi.utilities" "d3 "]]
                 [:q [:alfred "search alfred" "nikivi.utilities" "tldr "]]
                 [:w [:alfred "search alfred" "nikivi.utilities" "django "]]
                 [:e [:alfred "search alfred" "nikivi.utilities" "html "]]
                 [:r [:alfred "search alfred" "nikivi.utilities" "react "]]
                 [:t [:alfred "search alfred" "nikivi.utilities" "ts "]]
                 [:a [:alfred "search alfred" "nikivi.utilities" "man "]]
                 ;[:d [:alfred "search alfred" "nikivi.utilities" "docker "]]
                 [:f [:alfred "search alfred" "nikivi.utilities" "apple "]]
                 [:s [:alfred "search alfred" "nikivi.utilities" "lodash "]]
                 [:d [:alfred "search alfred" "nikivi.utilities" "node "]]
                 [:g [:alfred "search alfred" "nikivi.utilities" "godoc "]]
                 [:c [:alfred "search alfred" "nikivi.utilities" "css "]]
                 [:v [:alfred "search alfred" "nikivi.utilities" "vim "]]
                 [:b [:alfred "search alfred" "nikivi.utilities" "bash "]]]}
        {:des "commakey (words)"
         :rules [:comma-mode
                 [:w [:n :i :k :i :v :i]] ; -> nikivi
                 [:a [:n :i :k :i :t :a :v :o :l :o :b :o :e :v ]]]} ; -> nikitavoloboev
         {:des "dotkey (1-3, q-u, caps, tab)"
          :rules [:dot-mode
                  [:1 [:!Sc :l :o :s :e :spacebar :!S3]] ; -> Close #
                  [:2 [:!Sr :e :f :spacebar :!S3]] ; -> Ref #
                  [:3 [:!Sf :i :x :spacebar :!S3]] ; -> Fix #
                  [:q [:!Sa :spacebar :slash :slash :spacebar]] ; -> // (on same line)
                  [:w [:km "VSCode/XCode/Sublime comment on top of line"]]
                  [:e [:!St :!So :!Sd :!So :!Ssemicolon :spacebar]] ; -> TODO:
                  [:r [:km "VSCode/XCode/Sublime comment on top of line with TODO"]]
                  [:t [:!Sn :!So :!St :!Se :!Ssemicolon :spacebar]] ; -> NOTE:
                  [:y [:p :l :e :a :s :e :spacebar]] ; -> please
                  [:u [:u :p :d :a :t :e :spacebar]] ; -> update
                  [:caps_lock [:!Cf :!St :!So :!Sd :!So :!Ssemicolon :return_or_enter]] ; -> search TODO: in file
                  [:grave_accent_and_tilde [:!CSf :!St :!So :!Sd :!So :!Ssemicolon :return_or_enter]] ; -> search TODO: globally
                  [:left_gui [:!St :h :a :n :k :s :spacebar]] ; -> Thanks
                  [:spacebar [:!St :h :a :n :k :spacebar :y :o :u :period :spacebar]]]} ; -> Thank you.
         {:des "jsdot"
          :rules [:js-mode
                  [:tab [:km "w: MDN"]]
                  [:a [:c :o :n :s :o :l :e :period :l :o :g :!S9 :!S0 :left_arrow]] ; -> console.log()
                  ;[:a [:c :o :n :s :o :l :e :period :w :a :r :n :!S9 :!S0 :left_arrow]] ; -> console.warn()
                  [:s [:equal_sign :!Speriod :spacebar]] ; -> =>
                  [:d [:r :e :t :u :r :n :spacebar]] ; -> return
                  [:f [:!Cf :c :o :n :s :o :l :e :period :l :o :g :!S9 :return_or_enter]] ; -> search console.log( in file
                  ;[:f [:!Cf :c :o :n :s :o :l :e :period :w :a :r :n :!S9 :return_or_enter]] ; -> search console.warn( in file
                  [:g [:right_arrow :spacebar :equal_sign :!Speriod :spacebar :!Sopen_bracket :return_or_enter]] ; -> => {}
                  [:j [:right_arrow :spacebar :equal_sign :spacebar]] ; -> =
                  [:k [:right_arrow :spacebar :!Sopen_bracket :return_or_enter]] ; -> {  }
                  [:z [:spacebar :s :t :y :l :e :equal_sign :!Sopen_bracket :!Sclose_bracket :left_arrow]] ; -> style={}
                  ;[:x [:t :a :c :h :y :o :n :s :spacebar]] ; -> tachyons
                  ;[:c [:spacebar :s :t :y :l :e :equal_sign :!Sopen_bracket :!Sopen_bracket :!Sclose_bracket :!Sclose_bracket :left_arrow :left_arrow]] ; -> style={{}}
                  [:c [:spacebar :c :l :a :s :s :!Sn :a :m :e :equal_sign :!Squote :!Squote :left_arrow]] ; -> className=""
                  [:v [:j :a :v :a :s :c :r :i :p :t :spacebar]] ; -> javascript
                  [:b [:t :y :p :e :s :c :r :i :p :t :spacebar]]]} ; -> typescript
        {:des "godot"
         :rules[:go-mode
                [:tab [:km "w: GoDoc"]]
                [:a [:f :m :t :period :!Sp :r :i :n :t :l :n :!S9 :!S0 :left_arrow]] ; -> fmt.Println()
                [:s [:!Ssemicolon :equal_sign :spacebar]] ; -> :=
                [:d [:r :e :t :u :r :n :spacebar]] ; -> return
                [:f [:!Cf :f :m :t :period :p :return_or_enter]] ; -> search fmt.p in file
                [:g [:i :f :spacebar :e :r :r :spacebar :!S1 :equal_sign :spacebar :n :i :l :spacebar :!Sopen_bracket :return_or_enter]] ; -> if err != nil {}
                [:j [:grave_accent_and_tilde :j :s :o :n :!Ssemicolon :!Squote :!Squote :grave_accent_and_tilde :left_arrow :left_arrow]] ; -> `json:""`
                [:z [:l :o :g :period :!Sp :r :i :n :t :l :n :!S9 :!S0 :left_arrow]] ; -> log.Println()
                [:x [:f :m :t :period :!Sp :r :i :n :t :l :n :!S9 :!S0 :left_arrow :!Squote :hyphen :hyphen]] ; -> fmt.Println("--")
                [:c [:!STsemicolon]] ; Selection -> Go Playground
                [:v [:g :o :l :a :n :g :spacebar]] ; -> golang
                [:b [:l :o :g :period :!Sf :a :t :a :l :!S9 :e :r :r :!S0]]]} ; -> log.Fatal(err)
        {:des "pydot"
          :rules[:py-mode
                 [:a [:p :r :i :n :t :!S9 :!S0 :left_arrow]] ; -> print()
                 [:s [:hyphen :!Speriod]] ; -> ->
                 [:d [:r :e :t :u :r :n :spacebar]] ; -> return
                 [:v [:p :y :t :h :o :n :spacebar]]]} ; -> python
        {:des "swiftdot"
         :rules[:swift-mode
                [:a [:p :r :i :n :t :!S9 :!S0 :left_arrow]] ; -> print()
                [:v [:s :w :i :f :t :spacebar]]]} ; -> swift
        {:des "rustdot"
          :rules[:rust-mode
                 [:a [:p :r :i :n :t :l :n :!S1 :!S9 :!S0 :left_arrow]] ; -> println!()
                 [:v [:r :u :s :t :spacebar]]]} ; -> rust
        {:des "elixdot"
          :rules[:elixir-mode
                 [:a [:!Si :!So :period :p :u :t :s :!S9 :!S0 :left_arrow]] ; -> IO.puts()
                 [:v [:e :l :i :x :i :r :spacebar]]]} ; -> elixir
        {:des "spacekey (websites)"
         :rules [:spacebar-mode
                 ;[:tab :!CO5] ; TODO: Configure ScreenFlow recording
                 [:q [:km "open: CleanShot"]]
                 [:w :!TO3] ; Screenshot -> CleanShot
                 [:e :!TO2] ; Screenshot -> Clipboard
                 [:r :!CS4] ; Screenshot -> ~/Desktop
                 ;[:t :!TOCp] ; Screenshot -> Imgur
                 ;[:t :!TOCp] ; Screenshot -> Imgur (auth)
                 ;[:t :!COS4] ; Screenshot -> CleanShot (cloud)
                 ;[:i [:km "w: Google Sheets"]]
                 [:i [:km "w: GitHub (notifications)"]] ; TODO: jump between GitHub (issues/prs)
                 [:o [:km "w: Google Docs"]]
                 [:open_bracket [:km "w: Google Slides"]]
                 [:close_bracket [:km "w: Beautiful.ai"]]
                 [:a :!TO4] ; CleanShot recording
                 ;[:s :!CO5] ; TODO: Pause/unpause ScreenFlow recording
                 [:f :!CTOSg] ; Loom recording
                 [:g :!CO5] ; Start/stop ScreenFlow recording
                 [:h [:km "w: Roam Research"]]
                 [:j [:km "w: Excalidraw"]]
                 [:k [:km "w: GitHub"]]
                 [:l [:km "w: Localhost"]]
                 [:semicolon [:km "w: StackBlitz"]]
                 [:quote [:km "w: Learn Anything"]]
                 [:b [:km "w: Digital Ocean"]]
                 [:n [:km "w: GCP"]]
                 [:m [:km "w: AWS"]]
                 [:comma [:km "w: Diagrams"]]
                 [:period [:km "w: YouTube"]]
                 [:slash [:km "w: GitHub PR"]]]} ; TODO:
]}
